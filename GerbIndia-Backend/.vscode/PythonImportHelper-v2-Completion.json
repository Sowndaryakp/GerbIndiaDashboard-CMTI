[
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "TIMESTAMP",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Date",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Numeric",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "desc",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "and_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "and_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "and_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "and_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "and_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "or_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "and_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Date",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "desc",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "update",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "event",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_async_engine",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "column_property",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "selectinload",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "joinedload",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "aliased",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "selectinload",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "IpPhase",
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "Edit",
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "UpdateElement",
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "ShiftOpDisplay",
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "ShiftOpCreate",
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "ShiftOpGet",
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "ShiftOpUpdate",
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "GraphDataResponse",
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "ProductionGraphData",
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "InstructionCreate",
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "InstructionData",
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "InstructionUpdate",
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "LogsData",
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "LiveRecentResponse",
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "ShiftOpCreate",
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "ShiftOpGet",
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "ShiftOpUpdate",
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "LiveData",
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "ReportData",
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "GetWelder",
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "main_machine_monitoring.database.db_setup",
        "description": "main_machine_monitoring.database.db_setup",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.db_setup",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "main_machine_monitoring.database.db_setup",
        "description": "main_machine_monitoring.database.db_setup",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.db_setup",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "main_machine_monitoring.database.db_setup",
        "description": "main_machine_monitoring.database.db_setup",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.db_setup",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "main_machine_monitoring.database.db_setup",
        "description": "main_machine_monitoring.database.db_setup",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.db_setup",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "main_machine_monitoring.database.db_setup",
        "description": "main_machine_monitoring.database.db_setup",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.db_setup",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "main_machine_monitoring.database.db_setup",
        "description": "main_machine_monitoring.database.db_setup",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.db_setup",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "main_machine_monitoring.database.db_setup",
        "description": "main_machine_monitoring.database.db_setup",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.db_setup",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "main_machine_monitoring.database.db_setup",
        "description": "main_machine_monitoring.database.db_setup",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.db_setup",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "main_machine_monitoring.database.db_setup",
        "description": "main_machine_monitoring.database.db_setup",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.db_setup",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "main_machine_monitoring.database.db_setup",
        "description": "main_machine_monitoring.database.db_setup",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.db_setup",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "main_machine_monitoring.database.db_setup",
        "description": "main_machine_monitoring.database.db_setup",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.db_setup",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "main_machine_monitoring.database.db_setup",
        "description": "main_machine_monitoring.database.db_setup",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.db_setup",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "importPath": "main_machine_monitoring.database.db_setup",
        "description": "main_machine_monitoring.database.db_setup",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.db_setup",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "main_machine_monitoring.database.db_setup",
        "description": "main_machine_monitoring.database.db_setup",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.db_setup",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "main_machine_monitoring.database.db_setup",
        "description": "main_machine_monitoring.database.db_setup",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.db_setup",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "importPath": "main_machine_monitoring.database.db_setup",
        "description": "main_machine_monitoring.database.db_setup",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.db_setup",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "main_machine_monitoring.database.db_setup",
        "description": "main_machine_monitoring.database.db_setup",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.db_setup",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "main_machine_monitoring.database.db_setup",
        "description": "main_machine_monitoring.database.db_setup",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.db_setup",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "main_machine_monitoring.database.db_setup",
        "description": "main_machine_monitoring.database.db_setup",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.db_setup",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "main_machine_monitoring.database.db_setup",
        "description": "main_machine_monitoring.database.db_setup",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.db_setup",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "main_machine_monitoring.database.db_setup",
        "description": "main_machine_monitoring.database.db_setup",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.db_setup",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "main_machine_monitoring.database.db_setup",
        "description": "main_machine_monitoring.database.db_setup",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.db_setup",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "main_machine_monitoring.database.db_setup",
        "description": "main_machine_monitoring.database.db_setup",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.db_setup",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "main_machine_monitoring.database.db_setup",
        "description": "main_machine_monitoring.database.db_setup",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.db_setup",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "main_machine_monitoring.database.db_setup",
        "description": "main_machine_monitoring.database.db_setup",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.db_setup",
        "documentation": {}
    },
    {
        "label": "column",
        "importPath": "sqlalchemy.sql.expression",
        "description": "sqlalchemy.sql.expression",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql.expression",
        "documentation": {}
    },
    {
        "label": "null",
        "importPath": "sqlalchemy.sql.expression",
        "description": "sqlalchemy.sql.expression",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql.expression",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy.sql.expression",
        "description": "sqlalchemy.sql.expression",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql.expression",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "orm_class",
        "importPath": "main_machine_monitoring.database",
        "description": "main_machine_monitoring.database",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database",
        "documentation": {}
    },
    {
        "label": "orm_class",
        "importPath": "main_machine_monitoring.database",
        "description": "main_machine_monitoring.database",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database",
        "documentation": {}
    },
    {
        "label": "orm_class",
        "importPath": "main_machine_monitoring.database",
        "description": "main_machine_monitoring.database",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database",
        "documentation": {}
    },
    {
        "label": "db_setup",
        "importPath": "main_machine_monitoring.database",
        "description": "main_machine_monitoring.database",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database",
        "documentation": {}
    },
    {
        "label": "orm_class",
        "importPath": "main_machine_monitoring.database",
        "description": "main_machine_monitoring.database",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database",
        "documentation": {}
    },
    {
        "label": "db_setup",
        "importPath": "main_machine_monitoring.database",
        "description": "main_machine_monitoring.database",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database",
        "documentation": {}
    },
    {
        "label": "db_setup",
        "importPath": "main_machine_monitoring.database",
        "description": "main_machine_monitoring.database",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database",
        "documentation": {}
    },
    {
        "label": "orm_class",
        "importPath": "main_machine_monitoring.database",
        "description": "main_machine_monitoring.database",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database",
        "documentation": {}
    },
    {
        "label": "orm_class",
        "importPath": "main_machine_monitoring.database",
        "description": "main_machine_monitoring.database",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database",
        "documentation": {}
    },
    {
        "label": "db_setup",
        "importPath": "main_machine_monitoring.database",
        "description": "main_machine_monitoring.database",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database",
        "documentation": {}
    },
    {
        "label": "orm_class",
        "importPath": "main_machine_monitoring.database",
        "description": "main_machine_monitoring.database",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database",
        "documentation": {}
    },
    {
        "label": "db_setup",
        "importPath": "main_machine_monitoring.database",
        "description": "main_machine_monitoring.database",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database",
        "documentation": {}
    },
    {
        "label": "orm_class",
        "importPath": "main_machine_monitoring.database",
        "description": "main_machine_monitoring.database",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database",
        "documentation": {}
    },
    {
        "label": "db_setup",
        "importPath": "main_machine_monitoring.database",
        "description": "main_machine_monitoring.database",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database",
        "documentation": {}
    },
    {
        "label": "orm_class",
        "importPath": "main_machine_monitoring.database",
        "description": "main_machine_monitoring.database",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database",
        "documentation": {}
    },
    {
        "label": "orm_class",
        "importPath": "main_machine_monitoring.database",
        "description": "main_machine_monitoring.database",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database",
        "documentation": {}
    },
    {
        "label": "orm_class",
        "importPath": "main_machine_monitoring.database",
        "description": "main_machine_monitoring.database",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database",
        "documentation": {}
    },
    {
        "label": "db_setup",
        "importPath": "main_machine_monitoring.database",
        "description": "main_machine_monitoring.database",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database",
        "documentation": {}
    },
    {
        "label": "orm_class",
        "importPath": "main_machine_monitoring.database",
        "description": "main_machine_monitoring.database",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database",
        "documentation": {}
    },
    {
        "label": "orm_class",
        "importPath": "main_machine_monitoring.database",
        "description": "main_machine_monitoring.database",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database",
        "documentation": {}
    },
    {
        "label": "db_setup",
        "importPath": "main_machine_monitoring.database",
        "description": "main_machine_monitoring.database",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database",
        "documentation": {}
    },
    {
        "label": "orm_class",
        "importPath": "main_machine_monitoring.database",
        "description": "main_machine_monitoring.database",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database",
        "documentation": {}
    },
    {
        "label": "orm_class",
        "importPath": "main_machine_monitoring.database",
        "description": "main_machine_monitoring.database",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database",
        "documentation": {}
    },
    {
        "label": "db_setup",
        "importPath": "main_machine_monitoring.database",
        "description": "main_machine_monitoring.database",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database",
        "documentation": {}
    },
    {
        "label": "orm_class",
        "importPath": "main_machine_monitoring.database",
        "description": "main_machine_monitoring.database",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database",
        "documentation": {}
    },
    {
        "label": "orm_class",
        "importPath": "main_machine_monitoring.database",
        "description": "main_machine_monitoring.database",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database",
        "documentation": {}
    },
    {
        "label": "orm_class",
        "importPath": "main_machine_monitoring.database",
        "description": "main_machine_monitoring.database",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database",
        "documentation": {}
    },
    {
        "label": "db_setup",
        "importPath": "main_machine_monitoring.database",
        "description": "main_machine_monitoring.database",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database",
        "documentation": {}
    },
    {
        "label": "orm_class",
        "importPath": "main_machine_monitoring.database",
        "description": "main_machine_monitoring.database",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "WebSocket",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "BackgroundTasks",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "WebSocket",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordRequestForm",
        "importPath": "fastapi.security.oauth2",
        "description": "fastapi.security.oauth2",
        "isExtraImport": true,
        "detail": "fastapi.security.oauth2",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "main_machine_monitoring.router",
        "description": "main_machine_monitoring.router",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.router",
        "documentation": {}
    },
    {
        "label": "oauth2",
        "importPath": "main_machine_monitoring.router",
        "description": "main_machine_monitoring.router",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.router",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "main_machine_monitoring.router",
        "description": "main_machine_monitoring.router",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.router",
        "documentation": {}
    },
    {
        "label": "element",
        "importPath": "main_machine_monitoring.router",
        "description": "main_machine_monitoring.router",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.router",
        "documentation": {}
    },
    {
        "label": "machine",
        "importPath": "main_machine_monitoring.router",
        "description": "main_machine_monitoring.router",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.router",
        "documentation": {}
    },
    {
        "label": "live_data",
        "importPath": "main_machine_monitoring.router",
        "description": "main_machine_monitoring.router",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.router",
        "documentation": {}
    },
    {
        "label": "welder",
        "importPath": "main_machine_monitoring.router",
        "description": "main_machine_monitoring.router",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.router",
        "documentation": {}
    },
    {
        "label": "edit",
        "importPath": "main_machine_monitoring.router",
        "description": "main_machine_monitoring.router",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.router",
        "documentation": {}
    },
    {
        "label": "auth",
        "importPath": "main_machine_monitoring.router",
        "description": "main_machine_monitoring.router",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.router",
        "documentation": {}
    },
    {
        "label": "users",
        "importPath": "main_machine_monitoring.router",
        "description": "main_machine_monitoring.router",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.router",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "main_machine_monitoring.router",
        "description": "main_machine_monitoring.router",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.router",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "unquote",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "unquote",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "main_machine_monitoring.router.oauth2",
        "description": "main_machine_monitoring.router.oauth2",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.router.oauth2",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "request_schema",
        "importPath": "main_machine_monitoring.pydantic_schema",
        "description": "main_machine_monitoring.pydantic_schema",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.pydantic_schema",
        "documentation": {}
    },
    {
        "label": "request_schema",
        "importPath": "main_machine_monitoring.pydantic_schema",
        "description": "main_machine_monitoring.pydantic_schema",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.pydantic_schema",
        "documentation": {}
    },
    {
        "label": "request_schema",
        "importPath": "main_machine_monitoring.pydantic_schema",
        "description": "main_machine_monitoring.pydantic_schema",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.pydantic_schema",
        "documentation": {}
    },
    {
        "label": "request_schema",
        "importPath": "main_machine_monitoring.pydantic_schema",
        "description": "main_machine_monitoring.pydantic_schema",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.pydantic_schema",
        "documentation": {}
    },
    {
        "label": "request_schema",
        "importPath": "main_machine_monitoring.pydantic_schema",
        "description": "main_machine_monitoring.pydantic_schema",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.pydantic_schema",
        "documentation": {}
    },
    {
        "label": "request_schema",
        "importPath": "main_machine_monitoring.pydantic_schema",
        "description": "main_machine_monitoring.pydantic_schema",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.pydantic_schema",
        "documentation": {}
    },
    {
        "label": "request_schema",
        "importPath": "main_machine_monitoring.pydantic_schema",
        "description": "main_machine_monitoring.pydantic_schema",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.pydantic_schema",
        "documentation": {}
    },
    {
        "label": "ShiftOp",
        "importPath": "main_machine_monitoring.database.orm_class",
        "description": "main_machine_monitoring.database.orm_class",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.orm_class",
        "documentation": {}
    },
    {
        "label": "Machine",
        "importPath": "main_machine_monitoring.database.orm_class",
        "description": "main_machine_monitoring.database.orm_class",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.orm_class",
        "documentation": {}
    },
    {
        "label": "Welder",
        "importPath": "main_machine_monitoring.database.orm_class",
        "description": "main_machine_monitoring.database.orm_class",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.orm_class",
        "documentation": {}
    },
    {
        "label": "Element",
        "importPath": "main_machine_monitoring.database.orm_class",
        "description": "main_machine_monitoring.database.orm_class",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.orm_class",
        "documentation": {}
    },
    {
        "label": "Live",
        "importPath": "main_machine_monitoring.database.orm_class",
        "description": "main_machine_monitoring.database.orm_class",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.orm_class",
        "documentation": {}
    },
    {
        "label": "Production",
        "importPath": "main_machine_monitoring.database.orm_class",
        "description": "main_machine_monitoring.database.orm_class",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.orm_class",
        "documentation": {}
    },
    {
        "label": "StandardData",
        "importPath": "main_machine_monitoring.database.orm_class",
        "description": "main_machine_monitoring.database.orm_class",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.orm_class",
        "documentation": {}
    },
    {
        "label": "ShiftOp",
        "importPath": "main_machine_monitoring.database.orm_class",
        "description": "main_machine_monitoring.database.orm_class",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.orm_class",
        "documentation": {}
    },
    {
        "label": "Machine",
        "importPath": "main_machine_monitoring.database.orm_class",
        "description": "main_machine_monitoring.database.orm_class",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.orm_class",
        "documentation": {}
    },
    {
        "label": "Welder",
        "importPath": "main_machine_monitoring.database.orm_class",
        "description": "main_machine_monitoring.database.orm_class",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.orm_class",
        "documentation": {}
    },
    {
        "label": "Element",
        "importPath": "main_machine_monitoring.database.orm_class",
        "description": "main_machine_monitoring.database.orm_class",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.orm_class",
        "documentation": {}
    },
    {
        "label": "Graph",
        "importPath": "main_machine_monitoring.database.orm_class",
        "description": "main_machine_monitoring.database.orm_class",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.orm_class",
        "documentation": {}
    },
    {
        "label": "Machine",
        "importPath": "main_machine_monitoring.database.orm_class",
        "description": "main_machine_monitoring.database.orm_class",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.orm_class",
        "documentation": {}
    },
    {
        "label": "Inst",
        "importPath": "main_machine_monitoring.database.orm_class",
        "description": "main_machine_monitoring.database.orm_class",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.orm_class",
        "documentation": {}
    },
    {
        "label": "Machine",
        "importPath": "main_machine_monitoring.database.orm_class",
        "description": "main_machine_monitoring.database.orm_class",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.orm_class",
        "documentation": {}
    },
    {
        "label": "ShiftOp",
        "importPath": "main_machine_monitoring.database.orm_class",
        "description": "main_machine_monitoring.database.orm_class",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.orm_class",
        "documentation": {}
    },
    {
        "label": "Element",
        "importPath": "main_machine_monitoring.database.orm_class",
        "description": "main_machine_monitoring.database.orm_class",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.orm_class",
        "documentation": {}
    },
    {
        "label": "StandardData",
        "importPath": "main_machine_monitoring.database.orm_class",
        "description": "main_machine_monitoring.database.orm_class",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.orm_class",
        "documentation": {}
    },
    {
        "label": "LiveRecent",
        "importPath": "main_machine_monitoring.database.orm_class",
        "description": "main_machine_monitoring.database.orm_class",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.orm_class",
        "documentation": {}
    },
    {
        "label": "ShiftOp",
        "importPath": "main_machine_monitoring.database.orm_class",
        "description": "main_machine_monitoring.database.orm_class",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.orm_class",
        "documentation": {}
    },
    {
        "label": "Machine",
        "importPath": "main_machine_monitoring.database.orm_class",
        "description": "main_machine_monitoring.database.orm_class",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.orm_class",
        "documentation": {}
    },
    {
        "label": "Welder",
        "importPath": "main_machine_monitoring.database.orm_class",
        "description": "main_machine_monitoring.database.orm_class",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.orm_class",
        "documentation": {}
    },
    {
        "label": "Element",
        "importPath": "main_machine_monitoring.database.orm_class",
        "description": "main_machine_monitoring.database.orm_class",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.orm_class",
        "documentation": {}
    },
    {
        "label": "Live",
        "importPath": "main_machine_monitoring.database.orm_class",
        "description": "main_machine_monitoring.database.orm_class",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.orm_class",
        "documentation": {}
    },
    {
        "label": "Live",
        "importPath": "main_machine_monitoring.database.orm_class",
        "description": "main_machine_monitoring.database.orm_class",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.orm_class",
        "documentation": {}
    },
    {
        "label": "ShiftOp",
        "importPath": "main_machine_monitoring.database.orm_class",
        "description": "main_machine_monitoring.database.orm_class",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.orm_class",
        "documentation": {}
    },
    {
        "label": "Welder",
        "importPath": "main_machine_monitoring.database.orm_class",
        "description": "main_machine_monitoring.database.orm_class",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.orm_class",
        "documentation": {}
    },
    {
        "label": "Remarks",
        "importPath": "main_machine_monitoring.database.orm_class",
        "description": "main_machine_monitoring.database.orm_class",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.orm_class",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "main_machine_monitoring.database.orm_class",
        "description": "main_machine_monitoring.database.orm_class",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.orm_class",
        "documentation": {}
    },
    {
        "label": "LiveRecent",
        "importPath": "main_machine_monitoring.database.orm_class",
        "description": "main_machine_monitoring.database.orm_class",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.orm_class",
        "documentation": {}
    },
    {
        "label": "On",
        "importPath": "main_machine_monitoring.database.orm_class",
        "description": "main_machine_monitoring.database.orm_class",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.orm_class",
        "documentation": {}
    },
    {
        "label": "Production",
        "importPath": "main_machine_monitoring.database.orm_class",
        "description": "main_machine_monitoring.database.orm_class",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.orm_class",
        "documentation": {}
    },
    {
        "label": "LiveRecent",
        "importPath": "main_machine_monitoring.database.orm_class",
        "description": "main_machine_monitoring.database.orm_class",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.orm_class",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "main_machine_monitoring.database.orm_class",
        "description": "main_machine_monitoring.database.orm_class",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.orm_class",
        "documentation": {}
    },
    {
        "label": "Graph",
        "importPath": "main_machine_monitoring.database.orm_class",
        "description": "main_machine_monitoring.database.orm_class",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.orm_class",
        "documentation": {}
    },
    {
        "label": "LiveRecent",
        "importPath": "main_machine_monitoring.database.orm_class",
        "description": "main_machine_monitoring.database.orm_class",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.orm_class",
        "documentation": {}
    },
    {
        "label": "Logs",
        "importPath": "main_machine_monitoring.database.orm_class",
        "description": "main_machine_monitoring.database.orm_class",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.orm_class",
        "documentation": {}
    },
    {
        "label": "Live",
        "importPath": "main_machine_monitoring.database.orm_class",
        "description": "main_machine_monitoring.database.orm_class",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.orm_class",
        "documentation": {}
    },
    {
        "label": "LiveRecent",
        "importPath": "main_machine_monitoring.database.orm_class",
        "description": "main_machine_monitoring.database.orm_class",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.orm_class",
        "documentation": {}
    },
    {
        "label": "Logs",
        "importPath": "main_machine_monitoring.database.orm_class",
        "description": "main_machine_monitoring.database.orm_class",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.orm_class",
        "documentation": {}
    },
    {
        "label": "Live",
        "importPath": "main_machine_monitoring.database.orm_class",
        "description": "main_machine_monitoring.database.orm_class",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.orm_class",
        "documentation": {}
    },
    {
        "label": "LiveRecent",
        "importPath": "main_machine_monitoring.database.orm_class",
        "description": "main_machine_monitoring.database.orm_class",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.database.orm_class",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "starlette",
        "description": "starlette",
        "isExtraImport": true,
        "detail": "starlette",
        "documentation": {}
    },
    {
        "label": "websockets",
        "importPath": "starlette",
        "description": "starlette",
        "isExtraImport": true,
        "detail": "starlette",
        "documentation": {}
    },
    {
        "label": "update_graph_table",
        "importPath": "main_machine_monitoring.graph_tasks",
        "description": "main_machine_monitoring.graph_tasks",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.graph_tasks",
        "documentation": {}
    },
    {
        "label": "update_graph_table",
        "importPath": "main_machine_monitoring.graph_tasks",
        "description": "main_machine_monitoring.graph_tasks",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.graph_tasks",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "WebSocket",
        "importPath": "starlette.websockets",
        "description": "starlette.websockets",
        "isExtraImport": true,
        "detail": "starlette.websockets",
        "documentation": {}
    },
    {
        "label": "WebSocket",
        "importPath": "starlette.websockets",
        "description": "starlette.websockets",
        "isExtraImport": true,
        "detail": "starlette.websockets",
        "documentation": {}
    },
    {
        "label": "WebSocketDisconnect",
        "importPath": "starlette.websockets",
        "description": "starlette.websockets",
        "isExtraImport": true,
        "detail": "starlette.websockets",
        "documentation": {}
    },
    {
        "label": "WebSocketState",
        "importPath": "starlette.websockets",
        "description": "starlette.websockets",
        "isExtraImport": true,
        "detail": "starlette.websockets",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "JWTError",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordBearer",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "pytz",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytz",
        "description": "pytz",
        "detail": "pytz",
        "documentation": {}
    },
    {
        "label": "process_live_recent_entries",
        "importPath": "main_machine_monitoring.background_tasks",
        "description": "main_machine_monitoring.background_tasks",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.background_tasks",
        "documentation": {}
    },
    {
        "label": "BackgroundTaskManager",
        "importPath": "main_machine_monitoring.background_tasks",
        "description": "main_machine_monitoring.background_tasks",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.background_tasks",
        "documentation": {}
    },
    {
        "label": "run_periodic_task",
        "importPath": "main_machine_monitoring.background_tasks",
        "description": "main_machine_monitoring.background_tasks",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.background_tasks",
        "documentation": {}
    },
    {
        "label": "periodic_task",
        "importPath": "main_machine_monitoring.background_tasks",
        "description": "main_machine_monitoring.background_tasks",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.background_tasks",
        "documentation": {}
    },
    {
        "label": "CryptContext",
        "importPath": "passlib.context",
        "description": "passlib.context",
        "isExtraImport": true,
        "detail": "passlib.context",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "time,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time.",
        "description": "time.",
        "detail": "time.",
        "documentation": {}
    },
    {
        "label": "psycopg2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "psycopg2",
        "description": "psycopg2",
        "detail": "psycopg2",
        "documentation": {}
    },
    {
        "label": "ModbusTcpClient",
        "importPath": "pymodbus.client.sync",
        "description": "pymodbus.client.sync",
        "isExtraImport": true,
        "detail": "pymodbus.client.sync",
        "documentation": {}
    },
    {
        "label": "tabulate",
        "importPath": "tabulate",
        "description": "tabulate",
        "isExtraImport": true,
        "detail": "tabulate",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "uvicorn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uvicorn",
        "description": "uvicorn",
        "detail": "uvicorn",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "monitor_existing_live_recent_state",
        "importPath": "main_machine_monitoring.vol_cur_logs",
        "description": "main_machine_monitoring.vol_cur_logs",
        "isExtraImport": true,
        "detail": "main_machine_monitoring.vol_cur_logs",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "tensorflow",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tensorflow",
        "description": "tensorflow",
        "detail": "tensorflow",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "main_machine_monitoring.database.db_setup",
        "description": "main_machine_monitoring.database.db_setup",
        "peekOfCode": "def get_db():\n    db = SessionLocal()\n    print(SQLALCHEMY_DATABASE_URL)\n    print(db)\n    try:\n        yield db\n    finally:\n        db.close()\n# docker run -e IP_ADDRESS=10.82.126.73 --name demo_gerb_container -p 8000:8000 demo/gerb:1.0\n#docker tag tiei_main_initial:real_data_fix3 smt18m005/tiei-repo:real_data_fix3",
        "detail": "main_machine_monitoring.database.db_setup",
        "documentation": {}
    },
    {
        "label": "ip_phase",
        "kind": 5,
        "importPath": "main_machine_monitoring.database.db_setup",
        "description": "main_machine_monitoring.database.db_setup",
        "peekOfCode": "ip_phase = settings\nipadd = ip_phase.ip_address\nprint(ipadd)\n# Create the settings instance with the obtained IP address\nsettings = IpPhase()\n# print(settings.ip_address)\nSQLALCHEMY_DATABASE_URL = f\"postgresql://postgres:siri2251105@{settings.ip_address}/gerb\"\n# SQLALCHEMY_DATABASE_URL = \"postgresql://<username>:<password>@<ip-address/hostname>\"\nengine = create_engine(SQLALCHEMY_DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)",
        "detail": "main_machine_monitoring.database.db_setup",
        "documentation": {}
    },
    {
        "label": "ipadd",
        "kind": 5,
        "importPath": "main_machine_monitoring.database.db_setup",
        "description": "main_machine_monitoring.database.db_setup",
        "peekOfCode": "ipadd = ip_phase.ip_address\nprint(ipadd)\n# Create the settings instance with the obtained IP address\nsettings = IpPhase()\n# print(settings.ip_address)\nSQLALCHEMY_DATABASE_URL = f\"postgresql://postgres:siri2251105@{settings.ip_address}/gerb\"\n# SQLALCHEMY_DATABASE_URL = \"postgresql://<username>:<password>@<ip-address/hostname>\"\nengine = create_engine(SQLALCHEMY_DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()",
        "detail": "main_machine_monitoring.database.db_setup",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "main_machine_monitoring.database.db_setup",
        "description": "main_machine_monitoring.database.db_setup",
        "peekOfCode": "settings = IpPhase()\n# print(settings.ip_address)\nSQLALCHEMY_DATABASE_URL = f\"postgresql://postgres:siri2251105@{settings.ip_address}/gerb\"\n# SQLALCHEMY_DATABASE_URL = \"postgresql://<username>:<password>@<ip-address/hostname>\"\nengine = create_engine(SQLALCHEMY_DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\n# Dependency\ndef get_db():",
        "detail": "main_machine_monitoring.database.db_setup",
        "documentation": {}
    },
    {
        "label": "SQLALCHEMY_DATABASE_URL",
        "kind": 5,
        "importPath": "main_machine_monitoring.database.db_setup",
        "description": "main_machine_monitoring.database.db_setup",
        "peekOfCode": "SQLALCHEMY_DATABASE_URL = f\"postgresql://postgres:siri2251105@{settings.ip_address}/gerb\"\n# SQLALCHEMY_DATABASE_URL = \"postgresql://<username>:<password>@<ip-address/hostname>\"\nengine = create_engine(SQLALCHEMY_DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\n# Dependency\ndef get_db():\n    db = SessionLocal()\n    print(SQLALCHEMY_DATABASE_URL)\n    print(db)",
        "detail": "main_machine_monitoring.database.db_setup",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "main_machine_monitoring.database.db_setup",
        "description": "main_machine_monitoring.database.db_setup",
        "peekOfCode": "engine = create_engine(SQLALCHEMY_DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\n# Dependency\ndef get_db():\n    db = SessionLocal()\n    print(SQLALCHEMY_DATABASE_URL)\n    print(db)\n    try:\n        yield db",
        "detail": "main_machine_monitoring.database.db_setup",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "main_machine_monitoring.database.db_setup",
        "description": "main_machine_monitoring.database.db_setup",
        "peekOfCode": "SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\n# Dependency\ndef get_db():\n    db = SessionLocal()\n    print(SQLALCHEMY_DATABASE_URL)\n    print(db)\n    try:\n        yield db\n    finally:",
        "detail": "main_machine_monitoring.database.db_setup",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "main_machine_monitoring.database.db_setup",
        "description": "main_machine_monitoring.database.db_setup",
        "peekOfCode": "Base = declarative_base()\n# Dependency\ndef get_db():\n    db = SessionLocal()\n    print(SQLALCHEMY_DATABASE_URL)\n    print(db)\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "main_machine_monitoring.database.db_setup",
        "documentation": {}
    },
    {
        "label": "Plate",
        "kind": 6,
        "importPath": "main_machine_monitoring.database.orm_class",
        "description": "main_machine_monitoring.database.orm_class",
        "peekOfCode": "class Plate(Base):\n    __tablename__ = \"plate\"\n    id = Column(Integer, primary_key=True, nullable=False)\n    plate_thickness = Column(String, nullable=True)\n    plate_description = Column(String, nullable=True)\n    created_at = Column(TIMESTAMP(timezone=True), nullable=False, server_default=text('now()'))\n    # Adding the foreign key to the Element table table\n    element_id = Column(Integer, ForeignKey('Element Type.id'), nullable=False)\n    element_type = relationship(\"Element\", back_populates=\"plate\")\n    shift_op = relationship(\"ShiftOp\", back_populates=\"plate\", lazy=\"dynamic\")",
        "detail": "main_machine_monitoring.database.orm_class",
        "documentation": {}
    },
    {
        "label": "Remarks",
        "kind": 6,
        "importPath": "main_machine_monitoring.database.orm_class",
        "description": "main_machine_monitoring.database.orm_class",
        "peekOfCode": "class Remarks(Base):\n    __tablename__ = \"remarks\"\n    id = Column(Integer, primary_key=True, nullable=False)\n    Remarks = Column(String, nullable=True)\n    created_at = Column(TIMESTAMP(timezone=True), nullable=False, server_default=text('now()'))\n    # Adding the foreign key to the Element table table\n    operator_id = Column(Integer, ForeignKey('Welder details.id'), nullable=False)\n    welder_remarks = relationship(\"Welder\", back_populates=\"remarks\")\n    shift_op = relationship(\"ShiftOp\", back_populates=\"remarks\", lazy=\"dynamic\")\nclass ShiftOp(Base):",
        "detail": "main_machine_monitoring.database.orm_class",
        "documentation": {}
    },
    {
        "label": "ShiftOp",
        "kind": 6,
        "importPath": "main_machine_monitoring.database.orm_class",
        "description": "main_machine_monitoring.database.orm_class",
        "peekOfCode": "class ShiftOp(Base):\n    __tablename__ = \"operator_shift\"\n    id = Column(Integer, primary_key=True, nullable=False)\n    start_time = Column(TIMESTAMP(timezone=True), nullable=False)\n    end_time = Column(TIMESTAMP(timezone=True), nullable=False)\n    duration = Column(Float, nullable=False)  # Add duration as a regular column\n    I_no = Column(String, nullable=True)\n    Fc_no = Column(String, nullable=True)\n    project = Column(String, nullable=True)\n    # Adding the foreign key to the Machine table",
        "detail": "main_machine_monitoring.database.orm_class",
        "documentation": {}
    },
    {
        "label": "Welder",
        "kind": 6,
        "importPath": "main_machine_monitoring.database.orm_class",
        "description": "main_machine_monitoring.database.orm_class",
        "peekOfCode": "class Welder(Base):\n    __tablename__ = \"Welder details\"\n    id = Column(Integer, primary_key=True, nullable=False)\n    welder_name = Column(String, nullable=False)\n    welder_number = Column(Integer, nullable=False, unique=True)\n    date_of_joining = Column(Date, nullable=False)\n    welder_qualification = Column(String, nullable=False)\n    qualified_thickness = Column(Integer, nullable=True)\n    is_active = Column(Boolean, default=True)\n    # Adding the one-to-many relationship",
        "detail": "main_machine_monitoring.database.orm_class",
        "documentation": {}
    },
    {
        "label": "Element",
        "kind": 6,
        "importPath": "main_machine_monitoring.database.orm_class",
        "description": "main_machine_monitoring.database.orm_class",
        "peekOfCode": "class Element(Base):\n    __tablename__ = \"Element Type\"\n    id = Column(Integer, primary_key=True, nullable=False)\n    type = Column(String, nullable=False, unique=True)\n    range = Column(String, nullable=True)\n    standard_current = Column(String, nullable=False)\n    standard_voltage = Column(String, nullable=False)\n    element_description = Column(String, nullable=True)\n    is_active = Column(Boolean, default=True)\n    shift_op = relationship(\"ShiftOp\", back_populates=\"element\", lazy=\"dynamic\")",
        "detail": "main_machine_monitoring.database.orm_class",
        "documentation": {}
    },
    {
        "label": "Logs",
        "kind": 6,
        "importPath": "main_machine_monitoring.database.orm_class",
        "description": "main_machine_monitoring.database.orm_class",
        "peekOfCode": "class Logs(Base):\n    __tablename__ = \"vol_cur_logs\"\n    id = Column(Integer, primary_key=True, nullable=False)\n    current = Column(Float, nullable=False)\n    voltage = Column(Float, nullable=False)\n    created_at = Column(TIMESTAMP(timezone=True), nullable=False, server_default=text('now()'))\n    machine_id = Column(String, ForeignKey('Machine.machine_id'), nullable=False)\n    machine = relationship(\"Machine\", back_populates=\"logs_data\")\nclass StandardData(Base):\n    __tablename__ = \"std_cur_vol\"",
        "detail": "main_machine_monitoring.database.orm_class",
        "documentation": {}
    },
    {
        "label": "StandardData",
        "kind": 6,
        "importPath": "main_machine_monitoring.database.orm_class",
        "description": "main_machine_monitoring.database.orm_class",
        "peekOfCode": "class StandardData(Base):\n    __tablename__ = \"std_cur_vol\"\n    id = Column(Integer, primary_key=True, nullable=False)\n    low_std_curr = Column(Integer, nullable=False)\n    high_std_curr = Column(Integer, nullable=False)\n    low_std_vol = Column(Integer, nullable=True)\n    high_std_vol = Column(Integer, nullable=True)\n    type_id = Column(String, ForeignKey('Element Type.type'), nullable=False)\n    type = relationship(\"Element\", back_populates=\"type_sd\")\nclass Live(Base):",
        "detail": "main_machine_monitoring.database.orm_class",
        "documentation": {}
    },
    {
        "label": "Live",
        "kind": 6,
        "importPath": "main_machine_monitoring.database.orm_class",
        "description": "main_machine_monitoring.database.orm_class",
        "peekOfCode": "class Live(Base):\n    __tablename__ = \"live_data\"\n    id = Column(Integer, primary_key=True, autoincrement=True, nullable=False)\n    current = Column(Float, nullable=False)\n    voltage = Column(Float, nullable=False)\n    created_at = Column(TIMESTAMP(timezone=True), nullable=False, primary_key=True, server_default=text('now()'))\n    machine_id = Column(String, ForeignKey('Machine.machine_id'), nullable=False, primary_key=True)\n    machine = relationship(\"Machine\", back_populates=\"live_data\")\nclass Graph(Base):\n    __tablename__ = \"graph_data\"",
        "detail": "main_machine_monitoring.database.orm_class",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "main_machine_monitoring.database.orm_class",
        "description": "main_machine_monitoring.database.orm_class",
        "peekOfCode": "class Graph(Base):\n    __tablename__ = \"graph_data\"\n    id = Column(Integer, primary_key=True, nullable=False)\n    start_time = Column(TIMESTAMP(timezone=True), nullable=False)\n    end_time = Column(TIMESTAMP(timezone=True), nullable=False)\n    state = Column(String, nullable=False)\n    duration = Column(Float, nullable=False)\n    color = Column(String, nullable=False)  # Add the color column here\n    # Assuming you have a machine_id relationship\n    machine_id = Column(String, ForeignKey('Machine.machine_id'), nullable=False)",
        "detail": "main_machine_monitoring.database.orm_class",
        "documentation": {}
    },
    {
        "label": "State",
        "kind": 6,
        "importPath": "main_machine_monitoring.database.orm_class",
        "description": "main_machine_monitoring.database.orm_class",
        "peekOfCode": "class State(Base):\n    __tablename__ = \"check_state\"\n    id = Column(Integer, primary_key=True, nullable=False)\n    start_range_current = Column(Float, nullable=False)\n    end_range_current = Column(Float, nullable=False)\n    start_range_voltage = Column(Float, nullable=False)\n    end_range_voltage = Column(Float, nullable=False)\n    state = Column(String, nullable=False)\n    color = Column(String, nullable=False)\nclass LiveRecent(Base):",
        "detail": "main_machine_monitoring.database.orm_class",
        "documentation": {}
    },
    {
        "label": "LiveRecent",
        "kind": 6,
        "importPath": "main_machine_monitoring.database.orm_class",
        "description": "main_machine_monitoring.database.orm_class",
        "peekOfCode": "class LiveRecent(Base):\n    __tablename__ = \"Live_recent\"\n    id = Column(Integer, primary_key=True, nullable=False ,autoincrement=True)\n    current = Column(Float, nullable=False)\n    voltage = Column(Float, nullable=False)\n    created_at = Column(TIMESTAMP(timezone=True), nullable=False, server_default=text('now()'))\n    state = Column(Boolean, nullable=True)\n    machine_state = Column(Boolean, nullable=True)\n    # Adding the foreign key to the Machine table\n    machine_id = Column(String, ForeignKey('Machine.machine_id'), nullable=False)",
        "detail": "main_machine_monitoring.database.orm_class",
        "documentation": {}
    },
    {
        "label": "On",
        "kind": 6,
        "importPath": "main_machine_monitoring.database.orm_class",
        "description": "main_machine_monitoring.database.orm_class",
        "peekOfCode": "class On(Base):\n    __tablename__ = \"ON_data\"\n    id = Column(Integer, primary_key=True, nullable=False)\n    current = Column(Float, nullable=False)\n    voltage = Column(Float, nullable=False)\n    created_at = Column(TIMESTAMP(timezone=True), nullable=False, server_default=text('now()'))\n    # Adding the foreign key to the Machine table\n    machine_id = Column(String, ForeignKey('Machine.machine_id'), nullable=False)\n    machine = relationship(\"Machine\", back_populates=\"ON_data\")\nclass Production(Base):",
        "detail": "main_machine_monitoring.database.orm_class",
        "documentation": {}
    },
    {
        "label": "Production",
        "kind": 6,
        "importPath": "main_machine_monitoring.database.orm_class",
        "description": "main_machine_monitoring.database.orm_class",
        "peekOfCode": "class Production(Base):\n    __tablename__ = \"Production_data\"\n    id = Column(Integer, primary_key=True, nullable=False)\n    current = Column(Float, nullable=False)\n    voltage = Column(Float, nullable=False)\n    created_at = Column(TIMESTAMP(timezone=True), nullable=False, server_default=text('now()'))\n    # Adding the foreign key to the Machine table\n    machine_id = Column(String, ForeignKey('Machine.machine_id'), nullable=False)\n    machine = relationship(\"Machine\", back_populates=\"production_data\")\nclass Machine(Base):",
        "detail": "main_machine_monitoring.database.orm_class",
        "documentation": {}
    },
    {
        "label": "Machine",
        "kind": 6,
        "importPath": "main_machine_monitoring.database.orm_class",
        "description": "main_machine_monitoring.database.orm_class",
        "peekOfCode": "class Machine(Base):\n    __tablename__ = \"Machine\"\n    id = Column(Integer, primary_key=True, nullable=False)\n    machine_id = Column(String, unique=True, nullable=False)\n    name = Column(String, nullable=False)\n    model = Column(String, nullable=False)\n    maker = Column(String, nullable=False)\n    capacity_in_amp = Column(Integer, nullable=False)\n    date_of_purchase = Column(String, nullable=False)\n    # Adding the one-to-many relationship with Live and LiveRecent",
        "detail": "main_machine_monitoring.database.orm_class",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "main_machine_monitoring.database.orm_class",
        "description": "main_machine_monitoring.database.orm_class",
        "peekOfCode": "class User(Base):\n    __tablename__ = \"Admin login\"\n    id = Column(Integer, primary_key=True, nullable=False)\n    email = Column(String, nullable=False, unique=True)\n    password = Column(String, nullable=False)\n    created_at = Column(TIMESTAMP(timezone=True), nullable=False, server_default=text('now()'))\nclass Inst(Base):\n    __tablename__ = \"instruction\"\n    id = Column(Integer, primary_key=True, nullable=False)\n    instruction = Column(String, nullable=False, unique=True)",
        "detail": "main_machine_monitoring.database.orm_class",
        "documentation": {}
    },
    {
        "label": "Inst",
        "kind": 6,
        "importPath": "main_machine_monitoring.database.orm_class",
        "description": "main_machine_monitoring.database.orm_class",
        "peekOfCode": "class Inst(Base):\n    __tablename__ = \"instruction\"\n    id = Column(Integer, primary_key=True, nullable=False)\n    instruction = Column(String, nullable=False, unique=True)\n    created_at = Column(TIMESTAMP(timezone=True), nullable=False, server_default=text('now()'))",
        "detail": "main_machine_monitoring.database.orm_class",
        "documentation": {}
    },
    {
        "label": "MachineBase",
        "kind": 6,
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "peekOfCode": "class MachineBase(BaseModel):\n    machine_id: str\n    name: str\n    model: str\n    maker: str\n    capacity_in_amp: int\n    date_of_purchase: str\nclass CreateMachine(MachineBase):\n    pass\nclass SpareMachine(MachineBase):",
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "CreateMachine",
        "kind": 6,
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "peekOfCode": "class CreateMachine(MachineBase):\n    pass\nclass SpareMachine(MachineBase):\n    pass\nclass UpdateMachine(MachineBase):\n    pass\n# ELEMENTS\nclass ElementBase(BaseModel):\n    type: str\n    range: Optional[str] = None",
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "SpareMachine",
        "kind": 6,
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "peekOfCode": "class SpareMachine(MachineBase):\n    pass\nclass UpdateMachine(MachineBase):\n    pass\n# ELEMENTS\nclass ElementBase(BaseModel):\n    type: str\n    range: Optional[str] = None\n    standard_current: str\n    standard_voltage: str",
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "UpdateMachine",
        "kind": 6,
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "peekOfCode": "class UpdateMachine(MachineBase):\n    pass\n# ELEMENTS\nclass ElementBase(BaseModel):\n    type: str\n    range: Optional[str] = None\n    standard_current: str\n    standard_voltage: str\nclass CreateElement(ElementBase):\n    pass",
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "ElementBase",
        "kind": 6,
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "peekOfCode": "class ElementBase(BaseModel):\n    type: str\n    range: Optional[str] = None\n    standard_current: str\n    standard_voltage: str\nclass CreateElement(ElementBase):\n    pass\nclass UpdateElement(BaseModel):\n    range: Optional[str] = None\n    standard_current: str",
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "CreateElement",
        "kind": 6,
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "peekOfCode": "class CreateElement(ElementBase):\n    pass\nclass UpdateElement(BaseModel):\n    range: Optional[str] = None\n    standard_current: str\n    standard_voltage: str\n    element_description: str\nclass ReturnType(BaseModel):\n    type: str\n    range: Optional[str] = None",
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "UpdateElement",
        "kind": 6,
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "peekOfCode": "class UpdateElement(BaseModel):\n    range: Optional[str] = None\n    standard_current: str\n    standard_voltage: str\n    element_description: str\nclass ReturnType(BaseModel):\n    type: str\n    range: Optional[str] = None\n    standard_current: str\n    standard_voltage: str",
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "ReturnType",
        "kind": 6,
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "peekOfCode": "class ReturnType(BaseModel):\n    type: str\n    range: Optional[str] = None\n    standard_current: str\n    standard_voltage: str\n    element_description: Optional[str] = None\n    class config:\n        orm_mode = True\n#\n# class ReType(BaseModel):",
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "WelderBase",
        "kind": 6,
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "peekOfCode": "class WelderBase(BaseModel):\n    welder_name: str\n    welder_number: int\n    date_of_joining: date\n    welder_qualification: str\n    qualified_thickness: Optional[int] = None\nclass GetWelder(BaseModel):\n    welder_name: str\n    welder_number: int\n    date_of_joining: date",
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "GetWelder",
        "kind": 6,
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "peekOfCode": "class GetWelder(BaseModel):\n    welder_name: str\n    welder_number: int\n    date_of_joining: date\n    welder_qualification: str\n    qualified_thickness: Optional[int] = None\n# class ReturnWelder(BaseModel):\n#     I_no: str\n#     Fc_no: str\n#     project: str",
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "CreateWelder",
        "kind": 6,
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "peekOfCode": "class CreateWelder(WelderBase):\n    pass\nclass LiveBase(BaseModel):\n    current: float\n    voltage: float\n    created_at: datetime\n# EDIT\nclass Edit(BaseModel):\n    element_description: str\n    range: str",
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "LiveBase",
        "kind": 6,
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "peekOfCode": "class LiveBase(BaseModel):\n    current: float\n    voltage: float\n    created_at: datetime\n# EDIT\nclass Edit(BaseModel):\n    element_description: str\n    range: str\n    I_no: str\n    Fc_no: str",
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "Edit",
        "kind": 6,
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "peekOfCode": "class Edit(BaseModel):\n    element_description: str\n    range: str\n    I_no: str\n    Fc_no: str\n    project: str\n    remarks: str\n    plate_thickness: str\n    plate_description: str\n    class config:",
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "UpdateWelder",
        "kind": 6,
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "peekOfCode": "class UpdateWelder(BaseModel):\n    welder_name: str\n    date_of_joining: date\n    welder_qualification: str\n    qualified_thickness: Optional[int] = None\n# LOGIN\nclass CreateUser(BaseModel):\n    email: EmailStr\n    password: str\nclass UserOut(BaseModel):",
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "CreateUser",
        "kind": 6,
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "peekOfCode": "class CreateUser(BaseModel):\n    email: EmailStr\n    password: str\nclass UserOut(BaseModel):\n    id: int\n    email: EmailStr\n    password: str\n    created_at: datetime\n    class config:\n        orm_mode = True",
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "UserOut",
        "kind": 6,
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "peekOfCode": "class UserOut(BaseModel):\n    id: int\n    email: EmailStr\n    password: str\n    created_at: datetime\n    class config:\n        orm_mode = True\nclass UserLogin(BaseModel):\n    email: EmailStr\n    password: str",
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "UserLogin",
        "kind": 6,
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "peekOfCode": "class UserLogin(BaseModel):\n    email: EmailStr\n    password: str\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\nclass TokenData(BaseModel):\n    id: Optional[int] = None\nclass TestStimulation:\n    current: int",
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "Token",
        "kind": 6,
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "peekOfCode": "class Token(BaseModel):\n    access_token: str\n    token_type: str\nclass TokenData(BaseModel):\n    id: Optional[int] = None\nclass TestStimulation:\n    current: int\n    state: str\n    created_at: datetime\n# SHIFT",
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "TokenData",
        "kind": 6,
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "peekOfCode": "class TokenData(BaseModel):\n    id: Optional[int] = None\nclass TestStimulation:\n    current: int\n    state: str\n    created_at: datetime\n# SHIFT\n# class ShiftBase(BaseModel):\n#     shift: str\n#     start_time: time",
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "TestStimulation",
        "kind": 6,
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "peekOfCode": "class TestStimulation:\n    current: int\n    state: str\n    created_at: datetime\n# SHIFT\n# class ShiftBase(BaseModel):\n#     shift: str\n#     start_time: time\n#     end_time: time\n#     I_no: str",
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "ShiftOpCreate",
        "kind": 6,
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "peekOfCode": "class ShiftOpCreate(BaseModel):\n    operator_name: str\n    element_type: str\n    machine_name: str\n    start_time: int\n    end_time: int\n    I_no: str\n    Fc_no: str\n    project: str\n    plate_thickness: str",
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "ShiftOpGet",
        "kind": 6,
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "peekOfCode": "class ShiftOpGet(BaseModel):\n    machine_name: str\n    element_type: str\n    operator_name: str\n    start_time: datetime\n    end_time: datetime\n    I_no: str\n    Fc_no: str\n    project: str\n    plate_thickness: str",
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "ShiftOpDisplay",
        "kind": 6,
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "peekOfCode": "class ShiftOpDisplay(BaseModel):\n    machine_id: str\n    type: str\n    welder_name: str\n    start_time: datetime\n    end_time: datetime\n    I_no: str\n    Fc_no: str\n    project: str\n    standard_current: str",
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "ShiftOpUpdate",
        "kind": 6,
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "peekOfCode": "class ShiftOpUpdate(BaseModel):\n    element_type: str\n    start_time: int\n    end_time: int\n    I_no: str\n    Fc_no: str\n    project: str\nclass ShiftOp(ShiftOpCreate):\n    id: int\n    duration: float",
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "ShiftOp",
        "kind": 6,
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "peekOfCode": "class ShiftOp(ShiftOpCreate):\n    id: int\n    duration: float\n    def __init__(self, **data):\n        # Calculate the duration based on the provided start_time and end_time\n        start_time = data.get(\"start_time\")\n        end_time = data.get(\"end_time\")\n        if start_time and end_time:\n            duration = (end_time - start_time).total_seconds() / 3600.0  # Calculate duration in hours\n        else:",
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "IpPhase",
        "kind": 6,
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "peekOfCode": "class IpPhase(BaseSettings):\n    ip_address: str = \"127.0.0.1\"\n    #\n    # class Config:\n    #     env_file = \".env\"  # Optional: Load environment variables from a file\nsettings = IpPhase()\nclass SchedulingBase(BaseModel):\n    machine_name: str\n    machine_id: str\n    operator: str",
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "SchedulingBase",
        "kind": 6,
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "peekOfCode": "class SchedulingBase(BaseModel):\n    machine_name: str\n    machine_id: str\n    operator: str\n    part_no: str\n    project_id: str\n    shift: str\nclass VoltageData(BaseModel):\n    machine: str\n    voltage: float",
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "VoltageData",
        "kind": 6,
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "peekOfCode": "class VoltageData(BaseModel):\n    machine: str\n    voltage: float\n# GRAPH\nclass Datapoint(BaseModel):\n    name: str\n    value: List[int]\n    itemStyle: Dict\nclass GraphDataResponse(BaseModel):\n    minimumTimestamp: int",
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "Datapoint",
        "kind": 6,
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "peekOfCode": "class Datapoint(BaseModel):\n    name: str\n    value: List[int]\n    itemStyle: Dict\nclass GraphDataResponse(BaseModel):\n    minimumTimestamp: int\n    dataPoints: List[Datapoint]\n# REPORT\nclass ReportData(BaseModel):\n    machine_id: str",
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "GraphDataResponse",
        "kind": 6,
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "peekOfCode": "class GraphDataResponse(BaseModel):\n    minimumTimestamp: int\n    dataPoints: List[Datapoint]\n# REPORT\nclass ReportData(BaseModel):\n    machine_id: str\n    avg_current: float\n    avg_voltage: float\n# LOGS\nclass LogsData(BaseModel):",
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "ReportData",
        "kind": 6,
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "peekOfCode": "class ReportData(BaseModel):\n    machine_id: str\n    avg_current: float\n    avg_voltage: float\n# LOGS\nclass LogsData(BaseModel):\n    low_std_curr: int\n    high_std_curr: int\n    low_std_vol: int\n    high_std_vol: int",
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "LogsData",
        "kind": 6,
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "peekOfCode": "class LogsData(BaseModel):\n    low_std_curr: int\n    high_std_curr: int\n    low_std_vol: int\n    high_std_vol: int\nclass ProductionGraphData(BaseModel):\n    machine_id: str\n    state: str\n    duration: float\n    start_time: datetime",
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "ProductionGraphData",
        "kind": 6,
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "peekOfCode": "class ProductionGraphData(BaseModel):\n    machine_id: str\n    state: str\n    duration: float\n    start_time: datetime\n    end_time: datetime\nclass LiveRecentResponse(BaseModel):\n    id: int\n    current: float\n    voltage: float",
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "LiveRecentResponse",
        "kind": 6,
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "peekOfCode": "class LiveRecentResponse(BaseModel):\n    id: int\n    current: float\n    voltage: float\n    created_at: datetime  # You might want to adjust the type of the created_at field based on your needs\n    state: bool\n    machine_id: str\n    machine_state: bool\n# REMARKS\nclass RemarksBase(BaseModel):",
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "RemarksBase",
        "kind": 6,
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "peekOfCode": "class RemarksBase(BaseModel):\n    remarks: str\n    operator: str\nclass CreateRemark(RemarksBase):\n    pass\nclass LiveData(BaseModel):\n    id: int\n    current: float\n    voltage: float\n    created_at: datetime",
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "CreateRemark",
        "kind": 6,
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "peekOfCode": "class CreateRemark(RemarksBase):\n    pass\nclass LiveData(BaseModel):\n    id: int\n    current: float\n    voltage: float\n    created_at: datetime\n    machine_id: str\n    class Config:\n        orm_mode = True",
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "LiveData",
        "kind": 6,
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "peekOfCode": "class LiveData(BaseModel):\n    id: int\n    current: float\n    voltage: float\n    created_at: datetime\n    machine_id: str\n    class Config:\n        orm_mode = True\nclass InstructionData(BaseModel):\n    id: int",
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "InstructionData",
        "kind": 6,
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "peekOfCode": "class InstructionData(BaseModel):\n    id: int\n    instruction: str\n    class Config:\n        orm_mode = True\nclass InstructionCreate(BaseModel):\n    instruction: str\nclass InstructionUpdate(BaseModel):\n    instruction: str",
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "InstructionCreate",
        "kind": 6,
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "peekOfCode": "class InstructionCreate(BaseModel):\n    instruction: str\nclass InstructionUpdate(BaseModel):\n    instruction: str",
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "InstructionUpdate",
        "kind": 6,
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "peekOfCode": "class InstructionUpdate(BaseModel):\n    instruction: str",
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "main_machine_monitoring.pydantic_schema.request_schema",
        "description": "main_machine_monitoring.pydantic_schema.request_schema",
        "peekOfCode": "settings = IpPhase()\nclass SchedulingBase(BaseModel):\n    machine_name: str\n    machine_id: str\n    operator: str\n    part_no: str\n    project_id: str\n    shift: str\nclass VoltageData(BaseModel):\n    machine: str",
        "detail": "main_machine_monitoring.pydantic_schema.request_schema",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "main_machine_monitoring.router.all_logs",
        "description": "main_machine_monitoring.router.all_logs",
        "peekOfCode": "def test(machine_name: str, start_date: str, end_date: str , db: Session = Depends(get_db)):\n    query = db.query(orm_class.Logs).filter(orm_class.Logs.machine_id == machine_name)\n    if start_date:\n        start_datetime = datetime.strptime(start_date, \"%Y-%m-%d\")\n        query = query.filter(orm_class.Logs.created_at >= start_datetime)\n    if end_date:\n        end_datetime = datetime.strptime(end_date, \"%Y-%m-%d\")\n        # Assuming you want records up to the end of the specified date (e.g., up to 23:59:59)\n        end_datetime = end_datetime.replace(hour=23, minute=59, second=59)\n        query = query.filter(orm_class.Logs.created_at <= end_datetime)",
        "detail": "main_machine_monitoring.router.all_logs",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "main_machine_monitoring.router.all_logs",
        "description": "main_machine_monitoring.router.all_logs",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/all_logs\",\n    tags=['all_logs']\n)\n@router.get(\"/{machine_name}/{start_date}/{end_date}\")\ndef test(machine_name: str, start_date: str, end_date: str , db: Session = Depends(get_db)):\n    query = db.query(orm_class.Logs).filter(orm_class.Logs.machine_id == machine_name)\n    if start_date:\n        start_datetime = datetime.strptime(start_date, \"%Y-%m-%d\")\n        query = query.filter(orm_class.Logs.created_at >= start_datetime)",
        "detail": "main_machine_monitoring.router.all_logs",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "main_machine_monitoring.router.auth",
        "description": "main_machine_monitoring.router.auth",
        "peekOfCode": "def login(user_credentials: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(get_db)):\n    user = db.query(orm_class.User).filter(orm_class.User.email == user_credentials.username).first()\n    if not user:\n        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail=f'invalid credentials')\n    if not utils.verify(user_credentials.password, user.password):\n        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail=f'invalid credentials')\n    # create token\n    # return token\n    access_token = oauth2.create_access_token(data={\"user_id\": user.id})\n    return {\"access_token\": access_token, \"token_type\": \"bearer\"}",
        "detail": "main_machine_monitoring.router.auth",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "main_machine_monitoring.router.auth",
        "description": "main_machine_monitoring.router.auth",
        "peekOfCode": "router = APIRouter(tags=['Authentication'])\n@router.post('/login')\ndef login(user_credentials: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(get_db)):\n    user = db.query(orm_class.User).filter(orm_class.User.email == user_credentials.username).first()\n    if not user:\n        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail=f'invalid credentials')\n    if not utils.verify(user_credentials.password, user.password):\n        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail=f'invalid credentials')\n    # create token\n    # return token",
        "detail": "main_machine_monitoring.router.auth",
        "documentation": {}
    },
    {
        "label": "update_data",
        "kind": 2,
        "importPath": "main_machine_monitoring.router.edit",
        "description": "main_machine_monitoring.router.edit",
        "peekOfCode": "def update_data(element: Edit, machine_id: str, welder_name: str, type: str = Depends(unquote),\n                db: Session = Depends(db_setup.get_db)):\n    current_time = datetime.now()\n    try:\n        # Fetch machine_id, element_id, and operator_id\n        machine = db.query(orm_class.Machine).filter(orm_class.Machine.machine_id == machine_id).first()\n        element_data = db.query(orm_class.Element).filter(\n            and_(orm_class.Element.type == type, orm_class.Element.is_active == True)).first()\n        operator = db.query(orm_class.Welder).filter(\n            and_(orm_class.Welder.welder_name == welder_name, orm_class.Welder.is_active == True)).first()",
        "detail": "main_machine_monitoring.router.edit",
        "documentation": {}
    },
    {
        "label": "update_post",
        "kind": 2,
        "importPath": "main_machine_monitoring.router.edit",
        "description": "main_machine_monitoring.router.edit",
        "peekOfCode": "def update_post(type: str, element: UpdateElement, db: Session = Depends(db_setup.get_db),\n                user_id: int = Depends(get_current_user)):\n    print(\"==============================================\")\n    print(user_id)\n    print(\"==============================================\")\n    element_update_query = db.query(orm_class.Element).filter(orm_class.Element.type == type)\n    update_element = element_update_query.first()\n    # if not found\n    if update_element is None:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,",
        "detail": "main_machine_monitoring.router.edit",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "main_machine_monitoring.router.edit",
        "description": "main_machine_monitoring.router.edit",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/edit\",\n    tags=['edit']\n)\n@router.put(\"/type/welder_name\")\ndef update_data(element: Edit, machine_id: str, welder_name: str, type: str = Depends(unquote),\n                db: Session = Depends(db_setup.get_db)):\n    current_time = datetime.now()\n    try:\n        # Fetch machine_id, element_id, and operator_id",
        "detail": "main_machine_monitoring.router.edit",
        "documentation": {}
    },
    {
        "label": "create_post",
        "kind": 2,
        "importPath": "main_machine_monitoring.router.element",
        "description": "main_machine_monitoring.router.element",
        "peekOfCode": "def create_post(element: request_schema.CreateElement, db: Session = Depends(db_setup.get_db)):\n    print(\"Got new request at:\", datetime.now())\n    existing_element = db.query(orm_class.Element).filter_by(type=element.type).first()\n    if existing_element:\n        raise HTTPException(status_code=400, detail=f\"Element with type '{element.type}' already exists\")\n    new_element = orm_class.Element(**element.dict())\n    print(\"----------------------------------------------------------------------\")\n    print(new_element)\n    # Extracting standard_current and standard_voltage values\n    standard_current_values = element.standard_current.split(\"-\")",
        "detail": "main_machine_monitoring.router.element",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 2,
        "importPath": "main_machine_monitoring.router.element",
        "description": "main_machine_monitoring.router.element",
        "peekOfCode": "def root(type: str = Depends(unquote), db: Session = Depends(db_setup.get_db)):\n    print(f\"Searching for type: {type}\")\n    element = db.query(orm_class.Element).filter(orm_class.Element.type == type).first()\n    # If element is not found\n    if not element:\n        raise HTTPException(status_code=404, detail=f\"The element with type: {type} was not found\")\n    # Check if element is active\n    if not element.is_active:\n        raise HTTPException(status_code=404, detail=f\"The element with type: {type} does not exist or is inactive\")\n    return element",
        "detail": "main_machine_monitoring.router.element",
        "documentation": {}
    },
    {
        "label": "delete_post",
        "kind": 2,
        "importPath": "main_machine_monitoring.router.element",
        "description": "main_machine_monitoring.router.element",
        "peekOfCode": "def delete_post(type: str = Depends(unquote), db: Session = Depends(db_setup.get_db)):\n    element = db.query(orm_class.Element).filter(orm_class.Element.type == type).first()\n    if element is None:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                            detail=f\"Element with type: {type} does not exist\")\n    # Update is_active to False instead of deleting the element\n    element.is_active = False\n    db.commit()\n    return {\"message\": f\"Element '{type}' is now inactive\"}\n@router.put(\"/type\")",
        "detail": "main_machine_monitoring.router.element",
        "documentation": {}
    },
    {
        "label": "update_post",
        "kind": 2,
        "importPath": "main_machine_monitoring.router.element",
        "description": "main_machine_monitoring.router.element",
        "peekOfCode": "def update_post(element: request_schema.UpdateElement, db: Session = Depends(get_db),type: str = Depends(unquote)):\n    element_update_query = db.query(orm_class.Element).filter(orm_class.Element.type == type)\n    update_element = element_update_query.first()\n    # if not found\n    if update_element is None:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                            detail=f\"Machine with model:{type} does not exist\")\n    try:\n        # Update the Element details\n        element_update_query.update(element.dict(), synchronize_session=False)",
        "detail": "main_machine_monitoring.router.element",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "main_machine_monitoring.router.element",
        "description": "main_machine_monitoring.router.element",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/elements\",\n    tags=['elements']\n)\n@router.post(\"/\", status_code=status.HTTP_201_CREATED)\ndef create_post(element: request_schema.CreateElement, db: Session = Depends(db_setup.get_db)):\n    print(\"Got new request at:\", datetime.now())\n    existing_element = db.query(orm_class.Element).filter_by(type=element.type).first()\n    if existing_element:\n        raise HTTPException(status_code=400, detail=f\"Element with type '{element.type}' already exists\")",
        "detail": "main_machine_monitoring.router.element",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 2,
        "importPath": "main_machine_monitoring.router.excel",
        "description": "main_machine_monitoring.router.excel",
        "peekOfCode": "def root(\n        start_time: str = Query(None),\n        end_time: str = Query(None),\n        machine_id: str = Query(None),\n        welder_name: str = Query(None),\n        type: str = Query(None),\n        range: Optional[str] = Query(None),\n        I_no: str = Query(None),\n        Fc_no: str = Query(None),\n        project: str = Query(None),",
        "detail": "main_machine_monitoring.router.excel",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "main_machine_monitoring.router.excel",
        "description": "main_machine_monitoring.router.excel",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/excel\",\n    tags=['excel']\n)\n@router.get(\"/\", response_model=List[ShiftOpDisplay])\ndef root(\n        start_time: str = Query(None),\n        end_time: str = Query(None),\n        machine_id: str = Query(None),\n        welder_name: str = Query(None),",
        "detail": "main_machine_monitoring.router.excel",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 2,
        "importPath": "main_machine_monitoring.router.filter",
        "description": "main_machine_monitoring.router.filter",
        "peekOfCode": "def root(db: Session = Depends(db_setup.get_db)):\n    try:\n        # Query all ShiftOps without filtering by machine_id\n        shift_ops = db.query(orm_class.ShiftOp).all()\n        if not shift_ops:\n            raise HTTPException(status_code=404, detail=\"No ShiftOps found\")\n        # Create a List to store the results with additional information\n        results = []\n        # Iterate through the shift_ops and add information to the results List\n        for shift_op in shift_ops:",
        "detail": "main_machine_monitoring.router.filter",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "main_machine_monitoring.router.filter",
        "description": "main_machine_monitoring.router.filter",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/filter\",\n    tags=['filter']\n)\n@router.get(\"/\", response_model=List[ShiftOpDisplay])\ndef root(db: Session = Depends(db_setup.get_db)):\n    try:\n        # Query all ShiftOps without filtering by machine_id\n        shift_ops = db.query(orm_class.ShiftOp).all()\n        if not shift_ops:",
        "detail": "main_machine_monitoring.router.filter",
        "documentation": {}
    },
    {
        "label": "update_graph_table_route",
        "kind": 2,
        "importPath": "main_machine_monitoring.router.graph",
        "description": "main_machine_monitoring.router.graph",
        "peekOfCode": "def update_graph_table_route(db: Session = Depends(get_db)):\n    try:\n        update_graph_table(db)\n        return {\"message\": \"Graph table updated successfully\"}\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Failed to update Graph table: {str(e)}\")\n@router.get(\"/get_graph_data\", response_model=GraphDataResponse)\ndef get_graph_data(db: Session = Depends(get_db)):\n    try:\n        # Fetch graph data with associated machine details",
        "detail": "main_machine_monitoring.router.graph",
        "documentation": {}
    },
    {
        "label": "get_graph_data",
        "kind": 2,
        "importPath": "main_machine_monitoring.router.graph",
        "description": "main_machine_monitoring.router.graph",
        "peekOfCode": "def get_graph_data(db: Session = Depends(get_db)):\n    try:\n        # Fetch graph data with associated machine details\n        graph_data = db.query(Graph).options(joinedload(Graph.machine)).all()\n        # Initialize variables to find minimum timestamp\n        min_timestamp = float('inf')\n        output_data = []\n        for graph in graph_data:\n            # Convert start_time to epoch timestamp\n            start_time_epoch = int(graph.start_time.timestamp()) * 1000",
        "detail": "main_machine_monitoring.router.graph",
        "documentation": {}
    },
    {
        "label": "get_graph_data",
        "kind": 2,
        "importPath": "main_machine_monitoring.router.graph",
        "description": "main_machine_monitoring.router.graph",
        "peekOfCode": "def get_graph_data(machine_id: str = Query(...), date: str = Query(...), db: Session = Depends(get_db)):\n    try:\n        # Convert date string to datetime object\n        target_date = datetime.strptime(date, \"%Y-%m-%d\")\n        # Extract the start and end of the target date\n        start_of_day = datetime.combine(target_date, datetime.min.time())\n        end_of_day = datetime.combine(target_date, datetime.max.time())\n        # Fetch graph data with associated machine details filtered by the target date\n        graph_data = db.query(Graph).options(joinedload(Graph.machine)) \\\n            .filter(",
        "detail": "main_machine_monitoring.router.graph",
        "documentation": {}
    },
    {
        "label": "get_graph_data",
        "kind": 2,
        "importPath": "main_machine_monitoring.router.graph",
        "description": "main_machine_monitoring.router.graph",
        "peekOfCode": "def get_graph_data(\n    machine_id: str = Query(...),\n    start_date: str = Query(...),\n    end_date: str = Query(...),\n    db: Session = Depends(get_db)\n):\n    try:\n        target_start_date = datetime.strptime(start_date, \"%Y-%m-%d\")\n        target_end_date = datetime.strptime(end_date, \"%Y-%m-%d\")\n        start_of_day_start = datetime.combine(target_start_date, datetime.min.time())",
        "detail": "main_machine_monitoring.router.graph",
        "documentation": {}
    },
    {
        "label": "get_graph_data",
        "kind": 2,
        "importPath": "main_machine_monitoring.router.graph",
        "description": "main_machine_monitoring.router.graph",
        "peekOfCode": "def get_graph_data(\n    start_time: Optional[int] = Query(None, description=\"Start time in epoch seconds\"),\n    end_time: Optional[int] = Query(None, description=\"End time in epoch seconds\"),\n    db: Session = Depends(get_db)\n):\n    try:\n        # Convert epoch time to datetime if provided\n        start_datetime = datetime.fromtimestamp(start_time) if start_time else None\n        end_datetime = datetime.fromtimestamp(end_time) if end_time else None\n        # Fetch graph data with associated machine details",
        "detail": "main_machine_monitoring.router.graph",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "main_machine_monitoring.router.graph",
        "description": "main_machine_monitoring.router.graph",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/graph\",\n    tags=['graph']\n)\n# Route to update the Graph table based on LiveRecent and State tables\n@router.get(\"/update_graph_table\")\ndef update_graph_table_route(db: Session = Depends(get_db)):\n    try:\n        update_graph_table(db)\n        return {\"message\": \"Graph table updated successfully\"}",
        "detail": "main_machine_monitoring.router.graph",
        "documentation": {}
    },
    {
        "label": "create_instruction",
        "kind": 2,
        "importPath": "main_machine_monitoring.router.instruction",
        "description": "main_machine_monitoring.router.instruction",
        "peekOfCode": "def create_instruction(instruction: InstructionCreate, db: Session = Depends(get_db)):\n    db_instruction = Inst(instruction=instruction.instruction)\n    db.add(db_instruction)\n    try:\n        db.commit()\n        db.refresh(db_instruction)\n    except Exception as e:\n        db.rollback()\n        raise HTTPException(status_code=400, detail=str(e))\n    return instruction",
        "detail": "main_machine_monitoring.router.instruction",
        "documentation": {}
    },
    {
        "label": "read_instructions",
        "kind": 2,
        "importPath": "main_machine_monitoring.router.instruction",
        "description": "main_machine_monitoring.router.instruction",
        "peekOfCode": "def read_instructions(db: Session = Depends(get_db)):\n    instructions = db.query(Inst).all()\n    return instructions\n@router.put(\"/put_instructions/instruction_id\", response_model=InstructionData)\ndef update_instruction(instruction_id: int, updated_instruction: InstructionUpdate, db: Session = Depends(get_db)):\n    db_instruction = db.query(Inst).filter(Inst.id == instruction_id).first()\n    if db_instruction is None:\n        raise HTTPException(status_code=404, detail=\"Instruction not found\")\n    db_instruction.instruction = updated_instruction.instruction\n    try:",
        "detail": "main_machine_monitoring.router.instruction",
        "documentation": {}
    },
    {
        "label": "update_instruction",
        "kind": 2,
        "importPath": "main_machine_monitoring.router.instruction",
        "description": "main_machine_monitoring.router.instruction",
        "peekOfCode": "def update_instruction(instruction_id: int, updated_instruction: InstructionUpdate, db: Session = Depends(get_db)):\n    db_instruction = db.query(Inst).filter(Inst.id == instruction_id).first()\n    if db_instruction is None:\n        raise HTTPException(status_code=404, detail=\"Instruction not found\")\n    db_instruction.instruction = updated_instruction.instruction\n    try:\n        db.commit()\n        db.refresh(db_instruction)\n    except Exception as e:\n        db.rollback()",
        "detail": "main_machine_monitoring.router.instruction",
        "documentation": {}
    },
    {
        "label": "delete_instruction",
        "kind": 2,
        "importPath": "main_machine_monitoring.router.instruction",
        "description": "main_machine_monitoring.router.instruction",
        "peekOfCode": "def delete_instruction(instruction_id: int, db: Session = Depends(get_db)):\n    db_instruction = db.query(Inst).filter(Inst.id == instruction_id).first()\n    if db_instruction is None:\n        raise HTTPException(status_code=404, detail=\"Instruction not found\")\n    db.delete(db_instruction)\n    try:\n        db.commit()\n    except Exception as e:\n        db.rollback()\n        raise HTTPException(status_code=400, detail=str(e))",
        "detail": "main_machine_monitoring.router.instruction",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "main_machine_monitoring.router.instruction",
        "description": "main_machine_monitoring.router.instruction",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/instruction\",\n    tags=['instruction']\n)\n@router.post(\"/post_instructions/\", response_model=InstructionCreate)\ndef create_instruction(instruction: InstructionCreate, db: Session = Depends(get_db)):\n    db_instruction = Inst(instruction=instruction.instruction)\n    db.add(db_instruction)\n    try:\n        db.commit()",
        "detail": "main_machine_monitoring.router.instruction",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 2,
        "importPath": "main_machine_monitoring.router.live_data",
        "description": "main_machine_monitoring.router.live_data",
        "peekOfCode": "def root(machine_name: str, db: Session = Depends(db_setup.get_db)):\n    try:\n        machine = db.query(orm_class.Machine).filter(orm_class.Machine.machine_id == machine_name).first()\n        if not machine:\n            raise HTTPException(status_code=404, detail=\"Machine not found\")\n        recent_data = db.query(orm_class.LiveRecent).filter(orm_class.LiveRecent.machine == machine).limit(20).all()\n        return recent_data\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=str(e))\n@router.websocket(\"/{machine_name}/ws\")",
        "detail": "main_machine_monitoring.router.live_data",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 2,
        "importPath": "main_machine_monitoring.router.live_data",
        "description": "main_machine_monitoring.router.live_data",
        "peekOfCode": "def root(machine_name: str, db: Session = Depends(db_setup.get_db)):\n    try:\n        # Query the Machine table to find the machine with the specified machine_name\n        machine = db.query(orm_class.Machine).filter(orm_class.Machine.machine_id == machine_name).first()\n        if not machine:\n            raise HTTPException(status_code=404, detail=\"Machine not found\")\n        # Get the ID of the machine from the Machine table\n        machine_id = machine.id\n        # Get the LiveRecent data for the specified machine\n        live_recent_data = db.query(orm_class.LiveRecent).filter(orm_class.LiveRecent.machine == machine).first()",
        "detail": "main_machine_monitoring.router.live_data",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "main_machine_monitoring.router.live_data",
        "description": "main_machine_monitoring.router.live_data",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/live_data\",\n    tags=['live_data']\n)\n# Fixing machine_name to \"7D\"\n@router.get(\"/{machine_name}\")\ndef root(machine_name: str, db: Session = Depends(db_setup.get_db)):\n    try:\n        machine = db.query(orm_class.Machine).filter(orm_class.Machine.machine_id == machine_name).first()\n        if not machine:",
        "detail": "main_machine_monitoring.router.live_data",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 2,
        "importPath": "main_machine_monitoring.router.logs",
        "description": "main_machine_monitoring.router.logs",
        "peekOfCode": "def root(machine_id: str, epoch_time: int, db: Session = Depends(db_setup.get_db)):\n    # Convert epoch time to a datetime timestamp\n    timestamp = datetime.fromtimestamp(epoch_time)\n    # Query machine table to get the machine's ID\n    machine = db.query(Machine).filter(Machine.machine_id == machine_id).first()\n    if not machine:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=\"Machine not found\")\n    # Query ShiftOp table to find the relevant shift for the machine at the given time\n    shift_op = db.query(ShiftOp).filter(\n        ShiftOp.machine_id == machine.id,",
        "detail": "main_machine_monitoring.router.logs",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "main_machine_monitoring.router.logs",
        "description": "main_machine_monitoring.router.logs",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/for_log\",\n    tags=['for_log']\n)\n@router.get(\"/{machine_id}/{epoch_time}\", response_model=LogsData)\ndef root(machine_id: str, epoch_time: int, db: Session = Depends(db_setup.get_db)):\n    # Convert epoch time to a datetime timestamp\n    timestamp = datetime.fromtimestamp(epoch_time)\n    # Query machine table to get the machine's ID\n    machine = db.query(Machine).filter(Machine.machine_id == machine_id).first()",
        "detail": "main_machine_monitoring.router.logs",
        "documentation": {}
    },
    {
        "label": "create_post",
        "kind": 2,
        "importPath": "main_machine_monitoring.router.machine",
        "description": "main_machine_monitoring.router.machine",
        "peekOfCode": "def create_post(machine: request_schema.CreateMachine, db: Session = Depends(get_db)):\n    print(\"Got new request at:\", datetime.now())\n    new_machine = orm_class.Machine(**machine.dict())\n    db.add(new_machine)\n    db.commit()\n    db.refresh(new_machine)\n    return {\"data\": new_machine}\n# RETRIVING machines\n@router.get(\"/{model}\")\ndef root(model: str, db: Session = Depends(get_db)):",
        "detail": "main_machine_monitoring.router.machine",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 2,
        "importPath": "main_machine_monitoring.router.machine",
        "description": "main_machine_monitoring.router.machine",
        "peekOfCode": "def root(model: str, db: Session = Depends(get_db)):\n    model_name = db.query(orm_class.Machine).filter(orm_class.Machine.machine_id == model).first()\n    # if not found\n    if not model_name:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                            detail=f\"the machine with model:{model} not found\")\n    # if found\n    print(model_name)\n    return {\"detail\": model_name}\n# updating machines",
        "detail": "main_machine_monitoring.router.machine",
        "documentation": {}
    },
    {
        "label": "update_post",
        "kind": 2,
        "importPath": "main_machine_monitoring.router.machine",
        "description": "main_machine_monitoring.router.machine",
        "peekOfCode": "def update_post(model: str, machine: request_schema.UpdateMachine, db: Session = Depends(get_db)):\n    machine_update_query = db.query(orm_class.Machine).filter(orm_class.Machine.model == model)\n    update_machine = machine_update_query.first()\n    # if not found\n    if update_machine is None:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                            detail=f\"machine with model:{model} does not exsist\")\n    # if found\n    machine_update_query.update(machine.dict(), synchronize_session=False)\n    db.commit()",
        "detail": "main_machine_monitoring.router.machine",
        "documentation": {}
    },
    {
        "label": "delete_post",
        "kind": 2,
        "importPath": "main_machine_monitoring.router.machine",
        "description": "main_machine_monitoring.router.machine",
        "peekOfCode": "def delete_post(model: str, db: Session = Depends(get_db)):\n    delete_machine = db.query(orm_class.Machine).filter(orm_class.Machine.model == model)\n    # if not found\n    if delete_machine.first() is None:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                            detail=f\"machine with model:{model} does not exsist\")\n    # if found\n    delete_machine.delete(synchronize_session=False)\n    db.commit()\n    return {\"message\": \"machine was deleted\"}",
        "detail": "main_machine_monitoring.router.machine",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "main_machine_monitoring.router.machine",
        "description": "main_machine_monitoring.router.machine",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/machines\",\n    tags=['machines']\n)\n# CREATING machines\n@router.post(\"/\", status_code=status.HTTP_201_CREATED)\ndef create_post(machine: request_schema.CreateMachine, db: Session = Depends(get_db)):\n    print(\"Got new request at:\", datetime.now())\n    new_machine = orm_class.Machine(**machine.dict())\n    db.add(new_machine)",
        "detail": "main_machine_monitoring.router.machine",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "main_machine_monitoring.router.machine_color",
        "description": "main_machine_monitoring.router.machine_color",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/machine_color\",\n    tags=['machine_color']\n)\n@router.get(\"/\", response_model=List[LiveRecentResponse])\nasync def get_all_live_recent_data(db: Session = Depends(get_db)):\n    records = db.query(orm_class.LiveRecent).all()\n    return records",
        "detail": "main_machine_monitoring.router.machine_color",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "kind": 2,
        "importPath": "main_machine_monitoring.router.oauth2",
        "description": "main_machine_monitoring.router.oauth2",
        "peekOfCode": "def create_access_token(data: dict):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\ndef verify_access_token(token: str, credentials_exception):\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        id: int = payload.get(\"user_id\")",
        "detail": "main_machine_monitoring.router.oauth2",
        "documentation": {}
    },
    {
        "label": "verify_access_token",
        "kind": 2,
        "importPath": "main_machine_monitoring.router.oauth2",
        "description": "main_machine_monitoring.router.oauth2",
        "peekOfCode": "def verify_access_token(token: str, credentials_exception):\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        id: int = payload.get(\"user_id\")\n        if id is None:\n            raise credentials_exception\n        token_data = request_schema.TokenData(id=id)\n    except JWTError:\n        raise credentials_exception\n    return token_data",
        "detail": "main_machine_monitoring.router.oauth2",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "kind": 2,
        "importPath": "main_machine_monitoring.router.oauth2",
        "description": "main_machine_monitoring.router.oauth2",
        "peekOfCode": "def get_current_user(token: str = Depends(oauth2_scheme)):\n    credentials_exception = HTTPException(status_code=status.HTTP_401_UNAUTHORIZED,\n                                          detail=f'could not validate credentials',\n                                          headers={\"www-Authenticate\": \"Bearer\"})\n    return verify_access_token(token, credentials_exception)",
        "detail": "main_machine_monitoring.router.oauth2",
        "documentation": {}
    },
    {
        "label": "oauth2_scheme",
        "kind": 5,
        "importPath": "main_machine_monitoring.router.oauth2",
        "description": "main_machine_monitoring.router.oauth2",
        "peekOfCode": "oauth2_scheme = OAuth2PasswordBearer(tokenUrl='login')\n# SECRET_KEY\n# Algorithm\n# Expiration time\nSECRET_KEY = \"dad57a8def02292fb005eef6a0d2084864a62b2d6968619494e333905b038684\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\ndef create_access_token(data: dict):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)",
        "detail": "main_machine_monitoring.router.oauth2",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "main_machine_monitoring.router.oauth2",
        "description": "main_machine_monitoring.router.oauth2",
        "peekOfCode": "SECRET_KEY = \"dad57a8def02292fb005eef6a0d2084864a62b2d6968619494e333905b038684\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\ndef create_access_token(data: dict):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\ndef verify_access_token(token: str, credentials_exception):",
        "detail": "main_machine_monitoring.router.oauth2",
        "documentation": {}
    },
    {
        "label": "ALGORITHM",
        "kind": 5,
        "importPath": "main_machine_monitoring.router.oauth2",
        "description": "main_machine_monitoring.router.oauth2",
        "peekOfCode": "ALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\ndef create_access_token(data: dict):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\ndef verify_access_token(token: str, credentials_exception):\n    try:",
        "detail": "main_machine_monitoring.router.oauth2",
        "documentation": {}
    },
    {
        "label": "ACCESS_TOKEN_EXPIRE_MINUTES",
        "kind": 5,
        "importPath": "main_machine_monitoring.router.oauth2",
        "description": "main_machine_monitoring.router.oauth2",
        "peekOfCode": "ACCESS_TOKEN_EXPIRE_MINUTES = 30\ndef create_access_token(data: dict):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\ndef verify_access_token(token: str, credentials_exception):\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])",
        "detail": "main_machine_monitoring.router.oauth2",
        "documentation": {}
    },
    {
        "label": "create_post",
        "kind": 2,
        "importPath": "main_machine_monitoring.router.op_shift",
        "description": "main_machine_monitoring.router.op_shift",
        "peekOfCode": "def create_post(shift: ShiftOpCreate, db: Session = Depends(db_setup.get_db)):\n    try:\n        print(\"Got a new request at:\", datetime.now())\n        # Convert the integer epoch timestamps to datetime objects\n        start_time = datetime.utcfromtimestamp(shift.start_time)\n        end_time = datetime.utcfromtimestamp(shift.end_time)\n        # Calculate the duration based on the difference between start_time and end_time\n        duration = (end_time - start_time).total_seconds() / 3600.0  # Calculate duration in hours\n        # Define a timedelta representing 5 hours and 30 minutes\n        time_to_add = timedelta(hours=5, minutes=30)",
        "detail": "main_machine_monitoring.router.op_shift",
        "documentation": {}
    },
    {
        "label": "update_shift_ops",
        "kind": 2,
        "importPath": "main_machine_monitoring.router.op_shift",
        "description": "main_machine_monitoring.router.op_shift",
        "peekOfCode": "def update_shift_ops(\n        machine_id: str,\n        operator_name: str,\n        shift_op_update: ShiftOpUpdate,\n        db: Session = Depends(get_db)\n):\n    # Find the machine by its machine_id\n    machine = db.query(Machine).filter(Machine.machine_id == machine_id).first()\n    if not machine:\n        raise HTTPException(status_code=404, detail=\"Machine not found\")",
        "detail": "main_machine_monitoring.router.op_shift",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 2,
        "importPath": "main_machine_monitoring.router.op_shift",
        "description": "main_machine_monitoring.router.op_shift",
        "peekOfCode": "def root(machine_name: str, db: Session = Depends(db_setup.get_db)):\n    try:\n        # Query the Machine table to find the machine with the specified machine_name\n        machine = db.query(orm_class.Machine).filter(orm_class.Machine.machine_id == machine_name).first()\n        if not machine:\n            raise HTTPException(status_code=404, detail=\"Machine not found\")\n        # Query the ShiftOp table, filtering by machine_id based on the machine object's id\n        shift_ops = db.query(orm_class.ShiftOp).filter(orm_class.ShiftOp.machine_id == machine.id).all()\n        if not shift_ops:\n            raise HTTPException(status_code=404, detail=\"ShiftOps for machine not found\")",
        "detail": "main_machine_monitoring.router.op_shift",
        "documentation": {}
    },
    {
        "label": "delete_shift_ops",
        "kind": 2,
        "importPath": "main_machine_monitoring.router.op_shift",
        "description": "main_machine_monitoring.router.op_shift",
        "peekOfCode": "def delete_shift_ops(\n        machine_name: Optional[str] = None,\n        start_time: Optional[str] = None,\n        end_time: Optional[str] = None,\n        element_name: Optional[str] = None,\n        operator_name: Optional[str] = None,\n        I_no: Optional[str] = None,\n        Fc_no: Optional[str] = None,\n        project: Optional[str] = None,\n        db: Session = Depends(get_db)",
        "detail": "main_machine_monitoring.router.op_shift",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 2,
        "importPath": "main_machine_monitoring.router.op_shift",
        "description": "main_machine_monitoring.router.op_shift",
        "peekOfCode": "def root(db: Session = Depends(db_setup.get_db)):\n    try:\n        # Query all ShiftOps without filtering by machine_id\n        shift_ops = db.query(orm_class.ShiftOp).all()\n        if not shift_ops:\n            raise HTTPException(status_code=404, detail=\"No ShiftOps found\")\n        # Create a List to store the results with additional information\n        results = []\n        # Iterate through the shift_ops and add information to the results List\n        for shift_op in shift_ops:",
        "detail": "main_machine_monitoring.router.op_shift",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "main_machine_monitoring.router.op_shift",
        "description": "main_machine_monitoring.router.op_shift",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/op_shift\",\n    tags=['op_shift']\n)\nfrom sqlalchemy.orm import aliased\n@router.post(\"/\", status_code=status.HTTP_201_CREATED)\ndef create_post(shift: ShiftOpCreate, db: Session = Depends(db_setup.get_db)):\n    try:\n        print(\"Got a new request at:\", datetime.now())\n        # Convert the integer epoch timestamps to datetime objects",
        "detail": "main_machine_monitoring.router.op_shift",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "main_machine_monitoring.router.plate",
        "description": "main_machine_monitoring.router.plate",
        "peekOfCode": "def test(db: Session = Depends(get_db)):\n    # select * from machine\n    plate = db.query(orm_class.Plate).all()\n    return {\"Data\": plate}",
        "detail": "main_machine_monitoring.router.plate",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "main_machine_monitoring.router.plate",
        "description": "main_machine_monitoring.router.plate",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/plate\",\n    tags=['plate']\n)\n# get all machines data\n@router.get(\"/plate\")\ndef test(db: Session = Depends(get_db)):\n    # select * from machine\n    plate = db.query(orm_class.Plate).all()\n    return {\"Data\": plate}",
        "detail": "main_machine_monitoring.router.plate",
        "documentation": {}
    },
    {
        "label": "get_production_data_by_date_range",
        "kind": 2,
        "importPath": "main_machine_monitoring.router.production_data",
        "description": "main_machine_monitoring.router.production_data",
        "peekOfCode": "def get_production_data_by_date_range(\n    machine_id: str,\n    start_date: str,\n    end_date: str,\n    db: Session = Depends(db_setup.get_db)\n):\n    try:\n        # Convert string dates to datetime objects\n        start_datetime = datetime.strptime(start_date, \"%Y-%m-%d\")\n        end_datetime = datetime.strptime(end_date, \"%Y-%m-%d\")",
        "detail": "main_machine_monitoring.router.production_data",
        "documentation": {}
    },
    {
        "label": "get_live_data",
        "kind": 2,
        "importPath": "main_machine_monitoring.router.production_data",
        "description": "main_machine_monitoring.router.production_data",
        "peekOfCode": "def get_live_data(\n        start_time: int,\n        machine_id: str,\n        skip: int = Query(0, ge=0),\n        limit: int = Query(50, ge=1, le=1000),\n        db: Session = Depends(get_db)\n):\n    start_datetime = datetime.utcfromtimestamp(start_time)\n    live_data = db.query(Live).filter(\n      Live.created_at >= start_datetime,",
        "detail": "main_machine_monitoring.router.production_data",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "main_machine_monitoring.router.production_data",
        "description": "main_machine_monitoring.router.production_data",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/production_data\",\n    tags=['production_data']\n)\n@router.get(\"/{machine_id}/{start_date}/{end_date}\")\ndef get_production_data_by_date_range(\n    machine_id: str,\n    start_date: str,\n    end_date: str,\n    db: Session = Depends(db_setup.get_db)",
        "detail": "main_machine_monitoring.router.production_data",
        "documentation": {}
    },
    {
        "label": "create_post",
        "kind": 2,
        "importPath": "main_machine_monitoring.router.remarks",
        "description": "main_machine_monitoring.router.remarks",
        "peekOfCode": "def create_post(remark: request_schema.CreateRemark, db: Session = Depends(get_db)):\n    print(\"Got new request at:\", datetime.now())\n    new_remark = orm_class.Remarks(**remark.dict())\n    db.add(new_remark)\n    db.commit()\n    db.refresh(new_remark)\n    return {\"data\": new_remark}",
        "detail": "main_machine_monitoring.router.remarks",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "main_machine_monitoring.router.remarks",
        "description": "main_machine_monitoring.router.remarks",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/remarks\",\n    tags=['remarks']\n)\n# CREATING machines\n@router.post(\"/\", status_code=status.HTTP_201_CREATED)\ndef create_post(remark: request_schema.CreateRemark, db: Session = Depends(get_db)):\n    print(\"Got new request at:\", datetime.now())\n    new_remark = orm_class.Remarks(**remark.dict())\n    db.add(new_remark)",
        "detail": "main_machine_monitoring.router.remarks",
        "documentation": {}
    },
    {
        "label": "get_average_for_date",
        "kind": 2,
        "importPath": "main_machine_monitoring.router.report",
        "description": "main_machine_monitoring.router.report",
        "peekOfCode": "def get_average_for_date(\n        machine_id: str,\n        date: str,\n        db: Session = Depends(get_db)\n):\n    # Convert date string to datetime object\n    selected_date = datetime.strptime(date, \"%Y-%m-%d\")\n    # Fetch live data for the selected machine and date\n    live_data = db.query(Live).filter(\n        Live.machine_id == machine_id,",
        "detail": "main_machine_monitoring.router.report",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "main_machine_monitoring.router.report",
        "description": "main_machine_monitoring.router.report",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/report_data\",\n    tags=['report_data']\n)\n@router.get(\"/\")\ndef get_average_for_date(\n        machine_id: str,\n        date: str,\n        db: Session = Depends(get_db)\n):",
        "detail": "main_machine_monitoring.router.report",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "main_machine_monitoring.router.states",
        "description": "main_machine_monitoring.router.states",
        "peekOfCode": "router = APIRouter(\n)\n# Define an endpoint to trigger the background task\n@router.post(\"/process_live_recent\")\nasync def trigger_processing_task(db: Session = Depends(get_db)):\n    await process_live_recent_entries(db)\n    return {\"message\": \"Processing initiated\"}",
        "detail": "main_machine_monitoring.router.states",
        "documentation": {}
    },
    {
        "label": "create_user",
        "kind": 2,
        "importPath": "main_machine_monitoring.router.users",
        "description": "main_machine_monitoring.router.users",
        "peekOfCode": "def create_user(user: request_schema.CreateUser, db: Session = Depends(get_db)):\n    # hash the password -user.password\n    hashed_password = utils.hash(user.password)\n    user.password = hashed_password\n    new_user = orm_class.User(**user.dict())\n    db.add(new_user)\n    db.commit()\n    db.refresh(new_user)\n    response_user = {\n        \"id\": new_user.id,",
        "detail": "main_machine_monitoring.router.users",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 2,
        "importPath": "main_machine_monitoring.router.users",
        "description": "main_machine_monitoring.router.users",
        "peekOfCode": "def root(id: int, db: Session = Depends(get_db)):\n    user = db.query(orm_class.User).filter(orm_class.User.id == id).first()\n    if not user:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f\"The user with id:{id} not found\")\n    # Convert the user object to a dictionary\n    user_dict = user.__dict__\n    # Removing internal SQLAlchemy-related attributes\n    user_dict.pop(\"_sa_instance_state\", None)\n    # Return the user_dict\n    return user_dict",
        "detail": "main_machine_monitoring.router.users",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "main_machine_monitoring.router.users",
        "description": "main_machine_monitoring.router.users",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/users\",\n    tags=['users']\n)\n# CRUD operations for users\n# creating user\n@router.post(\"/\", status_code=status.HTTP_201_CREATED, response_model=request_schema.UserOut)\ndef create_user(user: request_schema.CreateUser, db: Session = Depends(get_db)):\n    # hash the password -user.password\n    hashed_password = utils.hash(user.password)",
        "detail": "main_machine_monitoring.router.users",
        "documentation": {}
    },
    {
        "label": "hash",
        "kind": 2,
        "importPath": "main_machine_monitoring.router.utils",
        "description": "main_machine_monitoring.router.utils",
        "peekOfCode": "def hash(password: str):\n    return pwd_context.hash(password)\n# compare the plain password and the hashed password\ndef verify(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)",
        "detail": "main_machine_monitoring.router.utils",
        "documentation": {}
    },
    {
        "label": "verify",
        "kind": 2,
        "importPath": "main_machine_monitoring.router.utils",
        "description": "main_machine_monitoring.router.utils",
        "peekOfCode": "def verify(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)",
        "detail": "main_machine_monitoring.router.utils",
        "documentation": {}
    },
    {
        "label": "pwd_context",
        "kind": 5,
        "importPath": "main_machine_monitoring.router.utils",
        "description": "main_machine_monitoring.router.utils",
        "peekOfCode": "pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n# to hash the password\ndef hash(password: str):\n    return pwd_context.hash(password)\n# compare the plain password and the hashed password\ndef verify(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)",
        "detail": "main_machine_monitoring.router.utils",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "main_machine_monitoring.router.vol_cur_logs",
        "description": "main_machine_monitoring.router.vol_cur_logs",
        "peekOfCode": "def test(machine_name: str, db: Session = Depends(get_db)):\n    machine = db.query(orm_class.Logs).filter(orm_class.Logs.machine_id == machine_name).order_by(\n        desc(orm_class.Logs.created_at)).first()\n    if not machine:\n        raise HTTPException(status_code=404, detail=\"Machine not found\")\n    return {\"detail\": machine}",
        "detail": "main_machine_monitoring.router.vol_cur_logs",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "main_machine_monitoring.router.vol_cur_logs",
        "description": "main_machine_monitoring.router.vol_cur_logs",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/logs\",\n    tags=['logs']\n)\n@router.get(\"/{machine_name}\")\ndef test(machine_name: str, db: Session = Depends(get_db)):\n    machine = db.query(orm_class.Logs).filter(orm_class.Logs.machine_id == machine_name).order_by(\n        desc(orm_class.Logs.created_at)).first()\n    if not machine:\n        raise HTTPException(status_code=404, detail=\"Machine not found\")",
        "detail": "main_machine_monitoring.router.vol_cur_logs",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "main_machine_monitoring.router.welder",
        "description": "main_machine_monitoring.router.welder",
        "peekOfCode": "def test(db: Session = Depends(db_setup.get_db)):\n    # Select active welders from the database\n    active_welders = db.query(orm_class.Welder).filter(orm_class.Welder.is_active == True).all()\n    # Filter and map the active welders to the GetWelder model\n    active_welders_mapped = [\n        GetWelder(\n            welder_name=welder.welder_name,\n            welder_number=welder.welder_number,\n            date_of_joining=welder.date_of_joining,\n            welder_qualification=welder.welder_qualification,",
        "detail": "main_machine_monitoring.router.welder",
        "documentation": {}
    },
    {
        "label": "create_post",
        "kind": 2,
        "importPath": "main_machine_monitoring.router.welder",
        "description": "main_machine_monitoring.router.welder",
        "peekOfCode": "def create_post(welder: request_schema.CreateWelder, db: Session = Depends(db_setup.get_db)):\n    existing_welder = db.query(orm_class.Welder).filter(orm_class.Welder.welder_number == welder.welder_number).first()\n    if existing_welder:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=f\"Welder with number {welder.welder_number} already exists.\"\n        )\n    new_welder = orm_class.Welder(**welder.dict())\n    db.add(new_welder)\n    db.commit()",
        "detail": "main_machine_monitoring.router.welder",
        "documentation": {}
    },
    {
        "label": "update_post",
        "kind": 2,
        "importPath": "main_machine_monitoring.router.welder",
        "description": "main_machine_monitoring.router.welder",
        "peekOfCode": "def update_post(welder_number: int , welder: request_schema.UpdateWelder, db: Session = Depends(db_setup.get_db)):\n    try:\n        welder_update_query = db.query(orm_class.Welder).filter(orm_class.Welder.welder_number == welder_number)\n        update_welder = welder_update_query.first()\n        if update_welder is None:\n            raise HTTPException(\n                status_code=status.HTTP_404_NOT_FOUND,\n                detail=f\"Welder {welder_number} does not exist\"\n            )\n        welder_update_query.update(welder.dict(), synchronize_session=False)",
        "detail": "main_machine_monitoring.router.welder",
        "documentation": {}
    },
    {
        "label": "delete_post",
        "kind": 2,
        "importPath": "main_machine_monitoring.router.welder",
        "description": "main_machine_monitoring.router.welder",
        "peekOfCode": "def delete_post(welder_number: int, db: Session = Depends(db_setup.get_db)):\n    welder = db.query(orm_class.Welder).filter(orm_class.Welder.welder_number == welder_number).first()\n    # Check if the welder exists\n    if welder is None:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                            detail=f\"Welder with name '{welder_number}' does not exist\")\n    # Soft delete: Mark the welder as inactive\n    welder.is_active = False\n    db.commit()\n    return {\"message\": \"Welder record marked as inactive\"}",
        "detail": "main_machine_monitoring.router.welder",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "main_machine_monitoring.router.welder",
        "description": "main_machine_monitoring.router.welder",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/welder\",\n    tags=['welder']\n)\n@router.get(\"/\", response_model=List[GetWelder])\ndef test(db: Session = Depends(db_setup.get_db)):\n    # Select active welders from the database\n    active_welders = db.query(orm_class.Welder).filter(orm_class.Welder.is_active == True).all()\n    # Filter and map the active welders to the GetWelder model\n    active_welders_mapped = [",
        "detail": "main_machine_monitoring.router.welder",
        "documentation": {}
    },
    {
        "label": "BackgroundTaskManager",
        "kind": 6,
        "importPath": "main_machine_monitoring.background_tasks",
        "description": "main_machine_monitoring.background_tasks",
        "peekOfCode": "class BackgroundTaskManager:\n    def __init__(self):\n        self.tasks = []\n    def add_task(self, task):\n        self.tasks.append(task)\nasync def periodic_task():\n    while True:\n        # Your periodic task logic goes here\n        print(\"Periodic task is running...\")\n        await asyncio.sleep(10)  # Wait for 10 seconds before the next execution",
        "detail": "main_machine_monitoring.background_tasks",
        "documentation": {}
    },
    {
        "label": "start_background_task",
        "kind": 2,
        "importPath": "main_machine_monitoring.background_tasks",
        "description": "main_machine_monitoring.background_tasks",
        "peekOfCode": "def start_background_task():\n    # To use the above functions, you can initiate and start the periodic task as follows:\n    background_tasks = BackgroundTaskManager()\n    background_tasks.add_task(periodic_task)  # Adding the periodic task to the background\n    # Start the periodic task\n    asyncio.create_task(run_periodic_task(background_tasks))\n# Define the main function\ndef main():\n    # Start the background task within an event loop\n    asyncio.run(start_background_task())",
        "detail": "main_machine_monitoring.background_tasks",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "main_machine_monitoring.background_tasks",
        "description": "main_machine_monitoring.background_tasks",
        "peekOfCode": "def main():\n    # Start the background task within an event loop\n    asyncio.run(start_background_task())\nif __name__ == \"__main__\":\n    # Call the main function\n    main()",
        "detail": "main_machine_monitoring.background_tasks",
        "documentation": {}
    },
    {
        "label": "last_processed_timestamp",
        "kind": 5,
        "importPath": "main_machine_monitoring.background_tasks",
        "description": "main_machine_monitoring.background_tasks",
        "peekOfCode": "last_processed_timestamp = datetime.utcnow()\nclass BackgroundTaskManager:\n    def __init__(self):\n        self.tasks = []\n    def add_task(self, task):\n        self.tasks.append(task)\nasync def periodic_task():\n    while True:\n        # Your periodic task logic goes here\n        print(\"Periodic task is running...\")",
        "detail": "main_machine_monitoring.background_tasks",
        "documentation": {}
    },
    {
        "label": "update_graph_table",
        "kind": 2,
        "importPath": "main_machine_monitoring.graph_tasks",
        "description": "main_machine_monitoring.graph_tasks",
        "peekOfCode": "def update_graph_table(db: Session):\n    live_recent_data = db.query(\n        LiveRecent.machine_id, LiveRecent.current, LiveRecent.voltage, LiveRecent.created_at\n    ).all()\n    for data in live_recent_data:\n        machine_id, current, voltage, created_at = data\n        state_info = db.query(State.state).filter(\n            State.start_range_current <= current,\n            State.end_range_current >= current,\n            State.start_range_voltage <= voltage,",
        "detail": "main_machine_monitoring.graph_tasks",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "main_machine_monitoring.graph_tasks",
        "description": "main_machine_monitoring.graph_tasks",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef update_graph_table(db: Session):\n    live_recent_data = db.query(\n        LiveRecent.machine_id, LiveRecent.current, LiveRecent.voltage, LiveRecent.created_at\n    ).all()\n    for data in live_recent_data:\n        machine_id, current, voltage, created_at = data\n        state_info = db.query(State.state).filter(\n            State.start_range_current <= current,\n            State.end_range_current >= current,",
        "detail": "main_machine_monitoring.graph_tasks",
        "documentation": {}
    },
    {
        "label": "monitor_existing_live_recent_state",
        "kind": 2,
        "importPath": "main_machine_monitoring.vol_cur_logs",
        "description": "main_machine_monitoring.vol_cur_logs",
        "peekOfCode": "def monitor_existing_live_recent_state():\n    # Dictionary to store last updated time for each machine's True state\n    last_true_time = defaultdict(lambda: None)\n    async def check_existing_live_recent_state():\n        while True:\n            # Get a database session\n            db = next(get_db())\n            # Query the existing LiveRecent table data\n            existing_entries = db.query(LiveRecent).all()\n            # Iterate through existing entries",
        "detail": "main_machine_monitoring.vol_cur_logs",
        "documentation": {}
    },
    {
        "label": "fetch_volcur_limits",
        "kind": 2,
        "importPath": "cmti_gerb_final",
        "description": "cmti_gerb_final",
        "peekOfCode": "def fetch_volcur_limits(epoch_time):\n    data = []\n    try:\n        for i in machine_ids:\n            response = requests.get(f\"http://192.168.0.105:6969/for_log/{i}/{epoch_time}\")\n            data.append(response.json())\n        return data \n    except requests.exceptions.RequestException as e:\n        print(f'Error Fetching Data: {e}')\n        return None",
        "detail": "cmti_gerb_final",
        "documentation": {}
    },
    {
        "label": "read_modbus_voltage_data",
        "kind": 2,
        "importPath": "cmti_gerb_final",
        "description": "cmti_gerb_final",
        "peekOfCode": "def read_modbus_voltage_data(register_range):\n    try:\n        with ModbusTcpClient(modbus_ip, port=modbus_port) as client:\n            response = client.read_holding_registers(register_range, 8, unit=1)\n            values = response.registers\n        data = dict(zip(machine_ids, values))\n        return data\n    except Exception as e:\n        logger.error(f\"Error reading Modbus voltage data: {e}\")\n        return None",
        "detail": "cmti_gerb_final",
        "documentation": {}
    },
    {
        "label": "read_modbus_current_data",
        "kind": 2,
        "importPath": "cmti_gerb_final",
        "description": "cmti_gerb_final",
        "peekOfCode": "def read_modbus_current_data(register_range):\n    try:\n        with ModbusTcpClient(modbus_ip, port=modbus_port) as client:\n            response = client.read_holding_registers(register_range, 8, unit=1)\n            values = response.registers\n        data = dict(zip(machine_ids, values))\n        return data\n    except Exception as e:\n        logger.error(f\"Error reading Modbus current data: {e}\")\n        return None",
        "detail": "cmti_gerb_final",
        "documentation": {}
    },
    {
        "label": "modbus_ip",
        "kind": 5,
        "importPath": "cmti_gerb_final",
        "description": "cmti_gerb_final",
        "peekOfCode": "modbus_ip = \"192.168.0.24\"\nmodbus_port = 502\n# Modbus Voltage Register Addresses\nmodbus_voltage_registers = 4096\n# Modbus Current Register Addresses\nmodbus_current_registers = 4104\nmachine_ids = ['7G', '7H', '7J', '7K', '7L', '27C', '27D', '27E']\nmachine_states = [False for i in range(len(machine_ids))]\nmachine_state = [False for i in range(len(machine_ids))]\ndef fetch_volcur_limits(epoch_time):",
        "detail": "cmti_gerb_final",
        "documentation": {}
    },
    {
        "label": "modbus_port",
        "kind": 5,
        "importPath": "cmti_gerb_final",
        "description": "cmti_gerb_final",
        "peekOfCode": "modbus_port = 502\n# Modbus Voltage Register Addresses\nmodbus_voltage_registers = 4096\n# Modbus Current Register Addresses\nmodbus_current_registers = 4104\nmachine_ids = ['7G', '7H', '7J', '7K', '7L', '27C', '27D', '27E']\nmachine_states = [False for i in range(len(machine_ids))]\nmachine_state = [False for i in range(len(machine_ids))]\ndef fetch_volcur_limits(epoch_time):\n    data = []",
        "detail": "cmti_gerb_final",
        "documentation": {}
    },
    {
        "label": "modbus_voltage_registers",
        "kind": 5,
        "importPath": "cmti_gerb_final",
        "description": "cmti_gerb_final",
        "peekOfCode": "modbus_voltage_registers = 4096\n# Modbus Current Register Addresses\nmodbus_current_registers = 4104\nmachine_ids = ['7G', '7H', '7J', '7K', '7L', '27C', '27D', '27E']\nmachine_states = [False for i in range(len(machine_ids))]\nmachine_state = [False for i in range(len(machine_ids))]\ndef fetch_volcur_limits(epoch_time):\n    data = []\n    try:\n        for i in machine_ids:",
        "detail": "cmti_gerb_final",
        "documentation": {}
    },
    {
        "label": "modbus_current_registers",
        "kind": 5,
        "importPath": "cmti_gerb_final",
        "description": "cmti_gerb_final",
        "peekOfCode": "modbus_current_registers = 4104\nmachine_ids = ['7G', '7H', '7J', '7K', '7L', '27C', '27D', '27E']\nmachine_states = [False for i in range(len(machine_ids))]\nmachine_state = [False for i in range(len(machine_ids))]\ndef fetch_volcur_limits(epoch_time):\n    data = []\n    try:\n        for i in machine_ids:\n            response = requests.get(f\"http://192.168.0.105:6969/for_log/{i}/{epoch_time}\")\n            data.append(response.json())",
        "detail": "cmti_gerb_final",
        "documentation": {}
    },
    {
        "label": "machine_ids",
        "kind": 5,
        "importPath": "cmti_gerb_final",
        "description": "cmti_gerb_final",
        "peekOfCode": "machine_ids = ['7G', '7H', '7J', '7K', '7L', '27C', '27D', '27E']\nmachine_states = [False for i in range(len(machine_ids))]\nmachine_state = [False for i in range(len(machine_ids))]\ndef fetch_volcur_limits(epoch_time):\n    data = []\n    try:\n        for i in machine_ids:\n            response = requests.get(f\"http://192.168.0.105:6969/for_log/{i}/{epoch_time}\")\n            data.append(response.json())\n        return data ",
        "detail": "cmti_gerb_final",
        "documentation": {}
    },
    {
        "label": "machine_states",
        "kind": 5,
        "importPath": "cmti_gerb_final",
        "description": "cmti_gerb_final",
        "peekOfCode": "machine_states = [False for i in range(len(machine_ids))]\nmachine_state = [False for i in range(len(machine_ids))]\ndef fetch_volcur_limits(epoch_time):\n    data = []\n    try:\n        for i in machine_ids:\n            response = requests.get(f\"http://192.168.0.105:6969/for_log/{i}/{epoch_time}\")\n            data.append(response.json())\n        return data \n    except requests.exceptions.RequestException as e:",
        "detail": "cmti_gerb_final",
        "documentation": {}
    },
    {
        "label": "machine_state",
        "kind": 5,
        "importPath": "cmti_gerb_final",
        "description": "cmti_gerb_final",
        "peekOfCode": "machine_state = [False for i in range(len(machine_ids))]\ndef fetch_volcur_limits(epoch_time):\n    data = []\n    try:\n        for i in machine_ids:\n            response = requests.get(f\"http://192.168.0.105:6969/for_log/{i}/{epoch_time}\")\n            data.append(response.json())\n        return data \n    except requests.exceptions.RequestException as e:\n        print(f'Error Fetching Data: {e}')",
        "detail": "cmti_gerb_final",
        "documentation": {}
    },
    {
        "label": "sleep_time",
        "kind": 5,
        "importPath": "cmti_gerb_final",
        "description": "cmti_gerb_final",
        "peekOfCode": "sleep_time = 1\ndatabase_connection_params = {\n    \"host\": \"192.168.0.105\",\n    \"database\": \"gerb\",\n    \"user\": \"postgres\",\n    \"password\": \"siri2251105\"\n}\n# Configure logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)",
        "detail": "cmti_gerb_final",
        "documentation": {}
    },
    {
        "label": "database_connection_params",
        "kind": 5,
        "importPath": "cmti_gerb_final",
        "description": "cmti_gerb_final",
        "peekOfCode": "database_connection_params = {\n    \"host\": \"192.168.0.105\",\n    \"database\": \"gerb\",\n    \"user\": \"postgres\",\n    \"password\": \"siri2251105\"\n}\n# Configure logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n# Connect to the PostgreSQL database",
        "detail": "cmti_gerb_final",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "cmti_gerb_final",
        "description": "cmti_gerb_final",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# Connect to the PostgreSQL database\ntry:\n    conn = psycopg2.connect(**database_connection_params)\n    cur = conn.cursor()\n    print('Database successfully connected!')\n    # Create Vol_Cur_Logs table if not exists\n    cur.execute('''\n        CREATE TABLE IF NOT EXISTS public.live_data (\n            id SERIAL PRIMARY KEY,",
        "detail": "cmti_gerb_final",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def test(db: Session = Depends(get_db)):\n    # select * from machine\n    machines = db.query(orm_class.Machine).all()\n    return {\"Data\": machines}\n# get all elements data\n@app.get(\"/elements\")\ndef test(db: Session = Depends(get_db)):\n    # Filter active elements from the database\n    active_elements = db.query(orm_class.Element).filter(orm_class.Element.is_active == True).all()\n    # Map active elements to a dictionary excluding the 'is_active' field",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def test(db: Session = Depends(get_db)):\n    # Filter active elements from the database\n    active_elements = db.query(orm_class.Element).filter(orm_class.Element.is_active == True).all()\n    # Map active elements to a dictionary excluding the 'is_active' field\n    elements_data = [\n        {k: v for k, v in element.__dict__.items() if k != '_sa_instance_state' and k != 'is_active'}\n        for element in active_elements\n    ]\n    return {\"Data\": elements_data}\n# getting the router",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "fetch_live_recent_data",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def fetch_live_recent_data(db: Session) -> list:\n    live_recent_data = (\n        db.query(orm_class.LiveRecent).order_by(orm_class.LiveRecent.id.desc()).all()\n    )\n    data_list = []\n    for entry in live_recent_data:\n        data_dict = {\n            \"id\": entry.id,\n            \"current\": entry.current,\n            \"voltage\": entry.voltage,",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI()\nbackground_tasks = BackgroundTaskManager()  # Create an instance of BackgroundTaskManager\nALLOWED_ORIGINS = [\"*\"]\n# ALLOWED_ORIGINS = [\"http://localhost:8080\", \"http://172.18.20.27:8080\", \"http://172.18.20.27\"]\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=ALLOWED_ORIGINS,\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"]",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "background_tasks",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "background_tasks = BackgroundTaskManager()  # Create an instance of BackgroundTaskManager\nALLOWED_ORIGINS = [\"*\"]\n# ALLOWED_ORIGINS = [\"http://localhost:8080\", \"http://172.18.20.27:8080\", \"http://172.18.20.27\"]\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=ALLOWED_ORIGINS,\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"]\n)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "ALLOWED_ORIGINS",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "ALLOWED_ORIGINS = [\"*\"]\n# ALLOWED_ORIGINS = [\"http://localhost:8080\", \"http://172.18.20.27:8080\", \"http://172.18.20.27\"]\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=ALLOWED_ORIGINS,\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"]\n)\n# get all machines data",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "create_and_insert_data",
        "kind": 2,
        "importPath": "main_setups",
        "description": "main_setups",
        "peekOfCode": "def create_and_insert_data():\n    machine_ids = [\"7G\", \"7H\", \"7J\", \"7K\", \"7L\", \"27C\", \"27D\", \"27E\"]  # List of machine IDs\n    CHECK_THRESHOLD_INTERVAL = 120  # Example interval, you can adjust this\n    try:\n        threshold_check_timer = 0  # Initialize the timer\n        while True:\n            for machine_id in machine_ids:\n                if threshold_check_timer >= CHECK_THRESHOLD_INTERVAL:\n                    # Generate random values for current and voltage\n                    if machine_id == '7G':",
        "detail": "main_setups",
        "documentation": {}
    },
    {
        "label": "SQLALCHEMY_DATABASE_URL",
        "kind": 5,
        "importPath": "main_setups",
        "description": "main_setups",
        "peekOfCode": "SQLALCHEMY_DATABASE_URL = \"postgresql://postgres:siri2251105@localhost/gerb\"\n# Create the engine and bind it to the base\nengine = create_engine(SQLALCHEMY_DATABASE_URL)\nBase = declarative_base()\nBase.metadata.bind = engine\n# Create the session factory\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nmachine_ids = [\"7G\", \"7H\", \"7J\", \"7K\", \"7L\", \"27C\", \"27D\", \"27E\"]\nCHECK_THRESHOLD_INTERVAL = 30  # 1 minute in seconds\ndef create_and_insert_data():",
        "detail": "main_setups",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "main_setups",
        "description": "main_setups",
        "peekOfCode": "engine = create_engine(SQLALCHEMY_DATABASE_URL)\nBase = declarative_base()\nBase.metadata.bind = engine\n# Create the session factory\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nmachine_ids = [\"7G\", \"7H\", \"7J\", \"7K\", \"7L\", \"27C\", \"27D\", \"27E\"]\nCHECK_THRESHOLD_INTERVAL = 30  # 1 minute in seconds\ndef create_and_insert_data():\n    machine_ids = [\"7G\", \"7H\", \"7J\", \"7K\", \"7L\", \"27C\", \"27D\", \"27E\"]  # List of machine IDs\n    CHECK_THRESHOLD_INTERVAL = 120  # Example interval, you can adjust this",
        "detail": "main_setups",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "main_setups",
        "description": "main_setups",
        "peekOfCode": "Base = declarative_base()\nBase.metadata.bind = engine\n# Create the session factory\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nmachine_ids = [\"7G\", \"7H\", \"7J\", \"7K\", \"7L\", \"27C\", \"27D\", \"27E\"]\nCHECK_THRESHOLD_INTERVAL = 30  # 1 minute in seconds\ndef create_and_insert_data():\n    machine_ids = [\"7G\", \"7H\", \"7J\", \"7K\", \"7L\", \"27C\", \"27D\", \"27E\"]  # List of machine IDs\n    CHECK_THRESHOLD_INTERVAL = 120  # Example interval, you can adjust this\n    try:",
        "detail": "main_setups",
        "documentation": {}
    },
    {
        "label": "Base.metadata.bind",
        "kind": 5,
        "importPath": "main_setups",
        "description": "main_setups",
        "peekOfCode": "Base.metadata.bind = engine\n# Create the session factory\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nmachine_ids = [\"7G\", \"7H\", \"7J\", \"7K\", \"7L\", \"27C\", \"27D\", \"27E\"]\nCHECK_THRESHOLD_INTERVAL = 30  # 1 minute in seconds\ndef create_and_insert_data():\n    machine_ids = [\"7G\", \"7H\", \"7J\", \"7K\", \"7L\", \"27C\", \"27D\", \"27E\"]  # List of machine IDs\n    CHECK_THRESHOLD_INTERVAL = 120  # Example interval, you can adjust this\n    try:\n        threshold_check_timer = 0  # Initialize the timer",
        "detail": "main_setups",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "main_setups",
        "description": "main_setups",
        "peekOfCode": "SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nmachine_ids = [\"7G\", \"7H\", \"7J\", \"7K\", \"7L\", \"27C\", \"27D\", \"27E\"]\nCHECK_THRESHOLD_INTERVAL = 30  # 1 minute in seconds\ndef create_and_insert_data():\n    machine_ids = [\"7G\", \"7H\", \"7J\", \"7K\", \"7L\", \"27C\", \"27D\", \"27E\"]  # List of machine IDs\n    CHECK_THRESHOLD_INTERVAL = 120  # Example interval, you can adjust this\n    try:\n        threshold_check_timer = 0  # Initialize the timer\n        while True:\n            for machine_id in machine_ids:",
        "detail": "main_setups",
        "documentation": {}
    },
    {
        "label": "machine_ids",
        "kind": 5,
        "importPath": "main_setups",
        "description": "main_setups",
        "peekOfCode": "machine_ids = [\"7G\", \"7H\", \"7J\", \"7K\", \"7L\", \"27C\", \"27D\", \"27E\"]\nCHECK_THRESHOLD_INTERVAL = 30  # 1 minute in seconds\ndef create_and_insert_data():\n    machine_ids = [\"7G\", \"7H\", \"7J\", \"7K\", \"7L\", \"27C\", \"27D\", \"27E\"]  # List of machine IDs\n    CHECK_THRESHOLD_INTERVAL = 120  # Example interval, you can adjust this\n    try:\n        threshold_check_timer = 0  # Initialize the timer\n        while True:\n            for machine_id in machine_ids:\n                if threshold_check_timer >= CHECK_THRESHOLD_INTERVAL:",
        "detail": "main_setups",
        "documentation": {}
    },
    {
        "label": "CHECK_THRESHOLD_INTERVAL",
        "kind": 5,
        "importPath": "main_setups",
        "description": "main_setups",
        "peekOfCode": "CHECK_THRESHOLD_INTERVAL = 30  # 1 minute in seconds\ndef create_and_insert_data():\n    machine_ids = [\"7G\", \"7H\", \"7J\", \"7K\", \"7L\", \"27C\", \"27D\", \"27E\"]  # List of machine IDs\n    CHECK_THRESHOLD_INTERVAL = 120  # Example interval, you can adjust this\n    try:\n        threshold_check_timer = 0  # Initialize the timer\n        while True:\n            for machine_id in machine_ids:\n                if threshold_check_timer >= CHECK_THRESHOLD_INTERVAL:\n                    # Generate random values for current and voltage",
        "detail": "main_setups",
        "documentation": {}
    },
    {
        "label": "get_current_shift",
        "kind": 2,
        "importPath": "main_setups_copy",
        "description": "main_setups_copy",
        "peekOfCode": "def get_current_shift():\n    now = datetime.now().time()\n    for idx, (start, end) in enumerate(shifts):\n        if start <= now <= end:\n            return \"on\"\n    return \"off\"\n# Set the initial state and start time\nstate = \"off\"\nstart_time = datetime.now().time()\n# Check the shift status and update the state and start time",
        "detail": "main_setups_copy",
        "documentation": {}
    },
    {
        "label": "SQLALCHEMY_DATABASE_URL",
        "kind": 5,
        "importPath": "main_setups_copy",
        "description": "main_setups_copy",
        "peekOfCode": "SQLALCHEMY_DATABASE_URL = \"postgresql://postgres:siri2251105@localhost/gerb\"\n# SQLALCHEMY_DATABASE_URL = \"postgresql://postgres:siri2251105@172.18.7.66/gerb\"\n# Create the engine and bind it to the base\nengine = create_engine(SQLALCHEMY_DATABASE_URL)\nBase = declarative_base()\nBase.metadata.bind = engine\n# Create the session factory\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n# Define shift timings\nshifts = [",
        "detail": "main_setups_copy",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "main_setups_copy",
        "description": "main_setups_copy",
        "peekOfCode": "engine = create_engine(SQLALCHEMY_DATABASE_URL)\nBase = declarative_base()\nBase.metadata.bind = engine\n# Create the session factory\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n# Define shift timings\nshifts = [\n    (dt_time(9, 0), dt_time(13, 0)),    # 9:00 AM - 1:00 PM\n    (dt_time(13, 30), dt_time(15, 30)), # 1:30 PM - 3:30 PM\n    (dt_time(16, 0), dt_time(18, 0))    # 4:00 PM - 6:00 PM",
        "detail": "main_setups_copy",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "main_setups_copy",
        "description": "main_setups_copy",
        "peekOfCode": "Base = declarative_base()\nBase.metadata.bind = engine\n# Create the session factory\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n# Define shift timings\nshifts = [\n    (dt_time(9, 0), dt_time(13, 0)),    # 9:00 AM - 1:00 PM\n    (dt_time(13, 30), dt_time(15, 30)), # 1:30 PM - 3:30 PM\n    (dt_time(16, 0), dt_time(18, 0))    # 4:00 PM - 6:00 PM\n]",
        "detail": "main_setups_copy",
        "documentation": {}
    },
    {
        "label": "Base.metadata.bind",
        "kind": 5,
        "importPath": "main_setups_copy",
        "description": "main_setups_copy",
        "peekOfCode": "Base.metadata.bind = engine\n# Create the session factory\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n# Define shift timings\nshifts = [\n    (dt_time(9, 0), dt_time(13, 0)),    # 9:00 AM - 1:00 PM\n    (dt_time(13, 30), dt_time(15, 30)), # 1:30 PM - 3:30 PM\n    (dt_time(16, 0), dt_time(18, 0))    # 4:00 PM - 6:00 PM\n]\ndef get_current_shift():",
        "detail": "main_setups_copy",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "main_setups_copy",
        "description": "main_setups_copy",
        "peekOfCode": "SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n# Define shift timings\nshifts = [\n    (dt_time(9, 0), dt_time(13, 0)),    # 9:00 AM - 1:00 PM\n    (dt_time(13, 30), dt_time(15, 30)), # 1:30 PM - 3:30 PM\n    (dt_time(16, 0), dt_time(18, 0))    # 4:00 PM - 6:00 PM\n]\ndef get_current_shift():\n    now = datetime.now().time()\n    for idx, (start, end) in enumerate(shifts):",
        "detail": "main_setups_copy",
        "documentation": {}
    },
    {
        "label": "shifts",
        "kind": 5,
        "importPath": "main_setups_copy",
        "description": "main_setups_copy",
        "peekOfCode": "shifts = [\n    (dt_time(9, 0), dt_time(13, 0)),    # 9:00 AM - 1:00 PM\n    (dt_time(13, 30), dt_time(15, 30)), # 1:30 PM - 3:30 PM\n    (dt_time(16, 0), dt_time(18, 0))    # 4:00 PM - 6:00 PM\n]\ndef get_current_shift():\n    now = datetime.now().time()\n    for idx, (start, end) in enumerate(shifts):\n        if start <= now <= end:\n            return \"on\"",
        "detail": "main_setups_copy",
        "documentation": {}
    },
    {
        "label": "state",
        "kind": 5,
        "importPath": "main_setups_copy",
        "description": "main_setups_copy",
        "peekOfCode": "state = \"off\"\nstart_time = datetime.now().time()\n# Check the shift status and update the state and start time\ncurrent_shift_status = get_current_shift()\nif current_shift_status == \"on\":\n    state = \"production\"\n    start_time = datetime.now().time()\n# Example usage\nprint(f\"State: {state}\")\nprint(f\"Start time: {start_time}\")",
        "detail": "main_setups_copy",
        "documentation": {}
    },
    {
        "label": "start_time",
        "kind": 5,
        "importPath": "main_setups_copy",
        "description": "main_setups_copy",
        "peekOfCode": "start_time = datetime.now().time()\n# Check the shift status and update the state and start time\ncurrent_shift_status = get_current_shift()\nif current_shift_status == \"on\":\n    state = \"production\"\n    start_time = datetime.now().time()\n# Example usage\nprint(f\"State: {state}\")\nprint(f\"Start time: {start_time}\")",
        "detail": "main_setups_copy",
        "documentation": {}
    },
    {
        "label": "current_shift_status",
        "kind": 5,
        "importPath": "main_setups_copy",
        "description": "main_setups_copy",
        "peekOfCode": "current_shift_status = get_current_shift()\nif current_shift_status == \"on\":\n    state = \"production\"\n    start_time = datetime.now().time()\n# Example usage\nprint(f\"State: {state}\")\nprint(f\"Start time: {start_time}\")",
        "detail": "main_setups_copy",
        "documentation": {}
    },
    {
        "label": "uvicorn_command",
        "kind": 5,
        "importPath": "run_uvicorn",
        "description": "run_uvicorn",
        "peekOfCode": "uvicorn_command = \"uvicorn main:app --reload --host 172.18.100.240 --port 6969\"\n# Run the command in the Python terminal\nsubprocess.run([\"python\", \"-m\", \"uvicorn\", \"main:app\", \"--reload\", \"--host\", \"172.18.100.33\", \"--port\", \"6969\"])",
        "detail": "run_uvicorn",
        "documentation": {}
    }
]